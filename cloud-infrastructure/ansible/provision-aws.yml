# Copyright (c) 2001-2018 by SAP SE, Walldorf, Germany.
# All rights reserved. Confidential and proprietary.

# ansible 2.9
---
  - name: Setup AWS for SapMachine
    hosts: local
    connection: local
    gather_facts: False

    vars:
      instance_type: t3a.xlarge
      instance_name: SapMachine Server
      security_group: SapMachine Server
      image: ami-04b9e92b5572fa0d1 # Ubuntu 18.04
      keypair: SapMachine
      region: us-east-1
      zone: sapmachine.io

    tasks:

      - name: allocate a new elastic IP
        local_action:
          module: ec2_eip
          state: present
          region: "{{ region }}"
        register: eip

      - name: Create a security group
        local_action:
          module: ec2_group
          name: "{{ security_group }}"
          description: "{{ security_group }}"
          region: "{{ region }}"
          rules:
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 155.56.40.0/22
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 155.56.68.208/28
            - proto: tcp
              from_port: 22
              to_port: 22
              cidr_ip: 193.16.224.0/25
            - proto: tcp
              from_port: 80
              to_port: 80
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 443
              to_port: 443
              cidr_ip: 0.0.0.0/0
            - proto: tcp
              from_port: 50000
              to_port: 50000
              # Jenkins local client
              cidr_ip: "{{ eip.public_ip }}/32"
            - proto: tcp
              from_port: 50000
              to_port: 50000
              # Jenkins macOS client
              cidr_ip: 193.16.224.0/25
            - proto: tcp
              from_port: 50000
              to_port: 50000
              # Jenkins Linux client
              group_id: "sg-051529de3f02c1983"
            - proto: tcp
              from_port: 50000
              to_port: 50000
              # Jenkins Windows client
              group_id: "sg-0d78996f78394c304"
          rules_egress:
            - proto: all
              cidr_ip: 0.0.0.0/0
        register: basic_firewall

      - name: Launch the new EC2 Instance
        local_action:
          module: ec2
          group: "{{ security_group }}"
          instance_type: "{{ instance_type}}"
          image: "{{ image }}"
          wait: yes
          region: "{{ region }}"
          keypair: "{{ keypair }}"
          count: 1
          volumes:
            - device_name: /dev/sda1
              volume_type: gp2
              volume_size: 2048
              encrypted: yes
              tags:
                Name: "{{ instance_name }}"
        register: ec2

      - name: associate the elastic IP with the new EC2 instance
        local_action:
          module: ec2_eip
          device_id: "{{ item.id }}"
          ip: "{{ eip.public_ip }}"
          region: "{{ region }}"
        with_items: "{{ ec2.instances }}"

      - name: Add tag to EC2 instance
        local_action:
          module: ec2_tag
          resource: "{{ item.id }}"
          state: present
          region: "{{ region }}"
          tags:
            Name: "{{ instance_name }}"
        with_items: "{{ ec2.instances }}"

      - name: Add the newly created EC2 instance to the local host group (located inside the directory)
        local_action: lineinfile
                      dest="./hosts"
                      regexp={{ eip.public_ip }}
                      insertafter="[SapMachineServer]" line={{ eip.public_ip }}
        with_items: ec2.instances

      - name: Wait for SSH to come up
        local_action: wait_for
                      host={{ eip.public_ip }}
                      port=22
                      state=started
        with_items: ec2.instances

      - name: Create DNS A record for ci
        local_action:
          module: route53
          state: present
          zone: "{{ zone }}"
          record: "ci.{{ zone }}"
          type: A
          ttl: 300
          value: "{{ eip.public_ip }}"
          overwrite: yes
          wait: yes

      - name: Create DNS A record for dist
        local_action:
          module: route53
          state: present
          zone: "{{ zone }}"
          record: "dist.{{ zone }}"
          type: A
          ttl: 300
          value: "{{ eip.public_ip }}"
          overwrite: yes
          wait: yes

      - name: Create DNS A record for www
        local_action:
          module: route53
          state: present
          zone: "{{ zone }}"
          record: "www.{{ zone }}"
          type: A
          ttl: 300
          value: "{{ eip.public_ip }}"
          overwrite: yes
          wait: yes

      - name: Create DNS A record for "root"
        local_action:
          module: route53
          state: present
          zone: "{{ zone }}"
          record: "{{ zone }}"
          type: A
          ttl: 300
          value: "{{ eip.public_ip }}"
          overwrite: yes
          wait: yes
