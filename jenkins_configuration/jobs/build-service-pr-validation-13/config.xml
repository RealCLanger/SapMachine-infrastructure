<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
  <actions/>
  <description>This project is generated. Do not modify manually.&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>14</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>7</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SAPMACHINE_GIT_REPOSITORY</name>
          <description>The Git repository to use.</description>
          <defaultValue>https://github.com/SAP/SapMachine.git</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SAPMACHINE_GIT_BRANCH</name>
          <description>The Git branch to build.</description>
          <defaultValue>sapmachine</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_TAG_NAME</name>
          <description></description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EXTRA_CONFIGURE_OPTIONS</name>
          <description>Configure options passed directly to configure script.</description>
          <defaultValue></defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_LINUX_X86_64</name>
          <description></description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_LINUX_PPC64LE</name>
          <description></description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_LINUX_PPC64</name>
          <description></description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_WINDOWS_X86_64</name>
          <description></description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_MACOS_X86_64</name>
          <description></description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_TESTS</name>
          <description>enable/disable jtreg runs</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>PUBLISH</name>
          <description>When set to true, the resulting bundles will be published to GitHub. (Only used in release builds!)</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RELEASE</name>
          <description>When set to true, marks this build as a release build, otherwise as pre-release. (Only used in release builds!)</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>hotspot_test_groups</name>
          <description>Select the test group for jtreg hotspot tests. Empty means disabled.</description>
          <defaultValue>:tier1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>jdk_test_groups</name>
          <description>Select the test group for jtreg jdk tests. Empty means disabled.</description>
          <defaultValue>:tier1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>langtools_test_groups</name>
          <description>Select the test group for jtreg langtools tests. Empty means disabled.</description>
          <defaultValue>&quot;jdk tools lib&quot;</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.64">
    <script>pipeline {
    agent {
        label &apos;linux_x86_64&apos;
    }
    stages {
        stage(&apos;Trigger Builds&apos;) {
            parallel {
                stage(&apos;Linux x86 64&apos;) {
                    when {
                        expression { params.BUILD_LINUX_X86_64 == true }
                    }
                    steps {
                        script {
                            def job_linux_x86_64 = build job: &apos;build-13-pr-validation-linux_x86_64&apos;, propagate: false, wait: true, parameters:
                            [
                                string(name: &apos;SAPMACHINE_GIT_REPOSITORY&apos;, value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: &apos;SAPMACHINE_GIT_BRANCH&apos;, value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: &apos;GIT_TAG_NAME&apos;, value: params.GIT_TAG_NAME),
                                string(name: &apos;EXTRA_CONFIGURE_OPTIONS&apos;, value: params.EXTRA_CONFIGURE_OPTIONS),
                                string(name: &apos;hotspot_test_groups&apos;, value: params.hotspot_test_groups),
                                string(name: &apos;jdk_test_groups&apos;, value: params.jdk_test_groups),
                                string(name: &apos;langtools_test_groups&apos;, value: params.langtools_test_groups),
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;RUN_TESTS&apos;, value: params.RUN_TESTS],
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;PUBLISH&apos;, value: params.PUBLISH],
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;RELEASE&apos;, value: params.RELEASE]
                            ]

                            env.LINUX_X86_64_JOB_ID = Integer.toString(job_linux_x86_64.getNumber())
                            env.LINUX_X86_64_ARTIFACT_DIR = &apos;linux_x86_64_&apos; + env.BUILD_NUMBER

                            sh &quot;mkdir -p ${WORKSPACE}/${LINUX_X86_64_ARTIFACT_DIR}&quot;
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: &apos;sapmachine-*.tar.gz&apos;, projectName: &apos;build--branch-linux_x86_64&apos;, target: env.LINUX_X86_64_ARTIFACT_DIR, selector:
                            [
                                $class: &apos;SpecificBuildSelector&apos;,
                                buildNumber: env.LINUX_X86_64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.LINUX_X86_64_ARTIFACT_DIR + &quot;/*.tar.gz&quot;
                                step ([$class: &apos;ArtifactArchiver&apos;, artifacts: artifacts_selector]);
                            }

                            sh &quot;rm -rf ${WORKSPACE}/${LINUX_X86_64_ARTIFACT_DIR}&quot;
                        }
                    }
                }
                stage(&apos;Linux ppc64le&apos;) {
                    when {
                        expression { params.BUILD_LINUX_PPC64LE == true }
                    }
                    steps {
                        script {
                            def job_linux_ppc64le = build job: &apos;build-13-pr-validation-linux_ppc64le&apos;, propagate: false, wait: true, parameters:
                            [
                                string(name: &apos;SAPMACHINE_GIT_REPOSITORY&apos;, value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: &apos;SAPMACHINE_GIT_BRANCH&apos;, value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: &apos;GIT_TAG_NAME&apos;, value: params.GIT_TAG_NAME),
                                string(name: &apos;EXTRA_CONFIGURE_OPTIONS&apos;, value: params.EXTRA_CONFIGURE_OPTIONS),
                                string(name: &apos;hotspot_test_groups&apos;, value: params.hotspot_test_groups),
                                string(name: &apos;jdk_test_groups&apos;, value: params.jdk_test_groups),
                                string(name: &apos;langtools_test_groups&apos;, value: params.langtools_test_groups),
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;RUN_TESTS&apos;, value: params.RUN_TESTS],
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;PUBLISH&apos;, value: params.PUBLISH],
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;RELEASE&apos;, value: params.RELEASE]
                            ]

                            env.LINUX_PPC64LE_JOB_ID = Integer.toString(job_linux_ppc64le.getNumber())
                            env.LINUX_PPC64LE_ARTIFACT_DIR = &apos;linux_ppc64le_&apos; + env.BUILD_NUMBER

                            sh &quot;mkdir -p ${WORKSPACE}/${LINUX_PPC64LE_ARTIFACT_DIR}&quot;
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: &apos;sapmachine-*.tar.gz&apos;, projectName: &apos;build--branch-linux_ppc64le&apos;, target: env.LINUX_PPC64LE_ARTIFACT_DIR, selector:
                            [
                                $class: &apos;SpecificBuildSelector&apos;,
                                buildNumber: env.LINUX_PPC64LE_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.LINUX_PPC64LE_ARTIFACT_DIR + &quot;/*.tar.gz&quot;
                                step ([$class: &apos;ArtifactArchiver&apos;, artifacts: artifacts_selector]);
                            }

                            sh &quot;rm -rf ${WORKSPACE}/${LINUX_PPC64LE_ARTIFACT_DIR}&quot;
                        }
                    }
                }
                stage(&apos;Linux ppc64&apos;) {
                    when {
                        expression { params.BUILD_LINUX_PPC64 == true }
                    }
                    steps {
                        script {
                            def job_linux_ppc64 = build job: &apos;build-13-pr-validation-linux_ppc64&apos;, propagate: false, wait: true, parameters:
                            [
                                string(name: &apos;SAPMACHINE_GIT_REPOSITORY&apos;, value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: &apos;SAPMACHINE_GIT_BRANCH&apos;, value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: &apos;GIT_TAG_NAME&apos;, value: params.GIT_TAG_NAME),
                                string(name: &apos;EXTRA_CONFIGURE_OPTIONS&apos;, value: params.EXTRA_CONFIGURE_OPTIONS),
                                string(name: &apos;hotspot_test_groups&apos;, value: params.hotspot_test_groups),
                                string(name: &apos;jdk_test_groups&apos;, value: params.jdk_test_groups),
                                string(name: &apos;langtools_test_groups&apos;, value: params.langtools_test_groups),
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;RUN_TESTS&apos;, value: params.RUN_TESTS],
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;PUBLISH&apos;, value: params.PUBLISH],
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;RELEASE&apos;, value: params.RELEASE]
                            ]

                            env.LINUX_PPC64_JOB_ID = Integer.toString(job_linux_ppc64.getNumber())
                            env.LINUX_PPC64_ARTIFACT_DIR = &apos;linux_ppc64_&apos; + env.BUILD_NUMBER

                            sh &quot;mkdir -p ${WORKSPACE}/${LINUX_PPC64_ARTIFACT_DIR}&quot;
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: &apos;sapmachine-*.tar.gz&apos;, projectName: &apos;build--branch-linux_ppc64&apos;, target: env.LINUX_PPC64_ARTIFACT_DIR, selector:
                            [
                                $class: &apos;SpecificBuildSelector&apos;,
                                buildNumber: env.LINUX_PPC64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.LINUX_PPC64_ARTIFACT_DIR + &quot;/*.tar.gz&quot;
                                step ([$class: &apos;ArtifactArchiver&apos;, artifacts: artifacts_selector]);
                            }

                            sh &quot;rm -rf ${WORKSPACE}/${LINUX_PPC64_ARTIFACT_DIR}&quot;
                        }
                    }
                }
                stage(&apos;Windows x86 64&apos;) {
                    when {
                        expression { params.BUILD_WINDOWS_X86_64 == true }
                    }
                    steps {
                        script {
                            def job_windows_x86_64 = build job: &apos;build-13-pr-validation-windows_x86_64&apos;, propagate: false, wait: true, parameters:
                            [
                                string(name: &apos;SAPMACHINE_GIT_REPOSITORY&apos;, value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: &apos;SAPMACHINE_GIT_BRANCH&apos;, value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: &apos;GIT_TAG_NAME&apos;, value: params.GIT_TAG_NAME),
                                string(name: &apos;EXTRA_CONFIGURE_OPTIONS&apos;, value: params.EXTRA_CONFIGURE_OPTIONS),
                                string(name: &apos;hotspot_test_groups&apos;, value: params.hotspot_test_groups),
                                string(name: &apos;jdk_test_groups&apos;, value: params.jdk_test_groups),
                                string(name: &apos;langtools_test_groups&apos;, value: params.langtools_test_groups),
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;RUN_TESTS&apos;, value: params.RUN_TESTS],
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;PUBLISH&apos;, value: params.PUBLISH],
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;RELEASE&apos;, value: params.RELEASE]
                            ]

                            env.WINDOWS_X86_64_JOB_ID = Integer.toString(job_windows_x86_64.getNumber())
                            env.WINDOWS_X86_64_ARTIFACT_DIR = &apos;windows_x86_64_&apos; + env.BUILD_NUMBER

                            sh &quot;mkdir -p ${WORKSPACE}/${WINDOWS_X86_64_ARTIFACT_DIR}&quot;
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: &apos;sapmachine-*.zip&apos;, projectName: &apos;build--branch-windows_x86_64&apos;, target: env.WINDOWS_X86_64_ARTIFACT_DIR, selector:
                            [
                                $class: &apos;SpecificBuildSelector&apos;,
                                buildNumber: env.WINDOWS_X86_64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.WINDOWS_X86_64_ARTIFACT_DIR + &quot;/*.zip&quot;
                                step ([$class: &apos;ArtifactArchiver&apos;, artifacts: artifacts_selector]);
                            }

                            sh &quot;rm -rf ${WORKSPACE}/${WINDOWS_X86_64_ARTIFACT_DIR}&quot;
                        }
                    }
                }
                stage(&apos;macOS x86 64&apos;) {
                    when {
                        expression { params.BUILD_MACOS_X86_64 == true }
                    }
                    steps {
                        script {
                            def job_macos_x86_64 = build job: &apos;build-13-pr-validation-macos_x86_64&apos;, propagate: false, wait: true, parameters:
                            [
                                string(name: &apos;SAPMACHINE_GIT_REPOSITORY&apos;, value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: &apos;SAPMACHINE_GIT_BRANCH&apos;, value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: &apos;GIT_TAG_NAME&apos;, value: params.GIT_TAG_NAME),
                                string(name: &apos;EXTRA_CONFIGURE_OPTIONS&apos;, value: params.EXTRA_CONFIGURE_OPTIONS),
                                string(name: &apos;hotspot_test_groups&apos;, value: params.hotspot_test_groups),
                                string(name: &apos;jdk_test_groups&apos;, value: params.jdk_test_groups),
                                string(name: &apos;langtools_test_groups&apos;, value: params.langtools_test_groups),
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;RUN_TESTS&apos;, value: params.RUN_TESTS],
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;PUBLISH&apos;, value: params.PUBLISH],
                                [$class: &apos;BooleanParameterValue&apos;, name: &apos;RELEASE&apos;, value: params.RELEASE]
                            ]

                            env.MACOS_X86_64_JOB_ID = Integer.toString(job_macos_x86_64.getNumber())
                            env.MACOS_X86_64_ARTIFACT_DIR = &apos;macos_x86_64_&apos; + env.BUILD_NUMBER

                            sh &quot;mkdir -p ${WORKSPACE}/${MACOS_X86_64_ARTIFACT_DIR}&quot;
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: &apos;sapmachine-*.tar.gz&apos;, projectName: &apos;build-13-pr-validation-macos_x86_64&apos;, target: env.MACOS_X86_64_ARTIFACT_DIR, selector:
                            [
                                $class: &apos;SpecificBuildSelector&apos;,
                                buildNumber: env.MACOS_X86_64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.MACOS_X86_64_ARTIFACT_DIR + &quot;/*.tar.gz&quot;
                                step ([$class: &apos;ArtifactArchiver&apos;, artifacts: artifacts_selector]);
                            }

                            sh &quot;rm -rf ${WORKSPACE}/${MACOS_X86_64_ARTIFACT_DIR}&quot;
                        }
                    }
                }
            }
        }
    }
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>