<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.3" />
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.3">
      <jobProperties />
      <triggers />
      <parameters />
      <options />
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>This project is generated. Do not modify manually.&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.1">
      <projectUrl>https://github.com/SAP/jmc</projectUrl>
      <displayName />
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers />
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>JMC_GIT_REPOSITORY</name>
          <description>The Git repository to use.</description>
          <defaultValue>https://github.com/SAP/jmc</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JMC_GIT_BRANCH</name>
          <description>The Git branch to build.</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_TAG_NAME</name>
          <description>The Git tag to build.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_JDK</name>
          <description>The JDK used to build the JMC</description>
          <defaultValue>11</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>JMC_ARCHIVE_NAME_PREFIX</name>
          <description>The prefix of the bundle archive.</description>
          <defaultValue>jmc-official-macos_x86_64</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RELEASE</name>
          <description>When set to true, marks this build as a release build, otherwise as pre-release.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2648.va9433432b33c">
    <script>pipeline {
    agent {
        label "macos_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                cleanWs deleteDirs: true, disableDeferredWipeout: true
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Checkout Repository") {
            steps {
                checkout changelog: true, poll: false, scm: [$class: 'GitSCM', branches: [[name: "*/${params.JMC_GIT_BRANCH}"]], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'jmc']], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: "${params.JMC_GIT_REPOSITORY}"]]]
            }
        }
        stage ('Download Prerequisites Windows'){
            when {
                 expression { JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/install-deps-jmc-win.sh'
            }
        }
        stage("Build and Basic Tests") {
            
            when {
                expression { !(JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) }
            }
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build_jmc.sh'
            }
        }
        stage("Build and Basic Tests Windows") {
            when {
                 expression { JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build_jmc_win.sh'
            }
        }
        stage("Test") {
            
            when {
                expression { !(JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) }
            }
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/test_jmc.sh'
            }
        }
        stage('Archive') {
            steps {
                script {
                    def artifact_name = readFile "${env.WORKSPACE}/jmc/artifact.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: artifact_name]);
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish_jmc.sh
                    '''
                }
            }
        }
    }
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>