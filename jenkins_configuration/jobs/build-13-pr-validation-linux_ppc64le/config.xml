<flow-definition plugin="workflow-job@2.35">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.9" />
  </actions>
  <description>This project is generated. Do not modify manually.&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SAPMACHINE_GIT_REPOSITORY</name>
          <description>The Git repository to use.</description>
          <defaultValue>https://github.com/SAP/SapMachine.git</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SAPMACHINE_GIT_BRANCH</name>
          <description>The Git branch to build.</description>
          <defaultValue>sapmachine13</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_TAG_NAME</name>
          <description>The Git tag to build.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GITHUB_PR_NUMBER</name>
          <description>The GitHub Pull Request number. Only used in Pull Request validation builds.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_NUMBER</name>
          <description>Sets the version build number explicitely.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SAPMACHINE_ARCHIVE_NAME_PREFIX</name>
          <description>The prefix of the bundle archive.</description>
          <defaultValue>sapmachine13-linux_ppc64le</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>_CONFIGURE_SYSROOT</name>
          <description>Sysroot configuration passed to configure script.</description>
          <defaultValue>--with-sysroot=/opt/sysroot-sles12-ppc64le --with-freetype-lib=/opt/sysroot-sles12-ppc64le/usr/lib64 --with-freetype-include=/opt/sysroot-sles12-ppc64le/usr/include --with-stdc++lib=static</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EXTRA_CONFIGURE_OPTIONS</name>
          <description>Configure options passed directly to configure script.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BOOT_JDK_MAJOR</name>
          <description>Specify the boot JDK major version explicitly.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>hotspot_test_groups</name>
          <description>Select the test group for jtreg hotspot tests. Empty means disabled.</description>
          <defaultValue>:tier1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>jdk_test_groups</name>
          <description>Select the test group for jtreg jdk tests. Empty means disabled.</description>
          <defaultValue>:tier1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>langtools_test_groups</name>
          <description>Select the test group for jtreg langtools tests. Empty means disabled.</description>
          <defaultValue>"jdk tools lib"</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_TESTS</name>
          <description>enable/disable jtreg runs</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_DACAPO</name>
          <description>enable/disable dacapo run</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>PUBLISH</name>
          <description>When set to true, the resulting bundles will be published to GitHub.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RELEASE</name>
          <description>When set to true, marks this build as a release build, otherwise as pre-release.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty />
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script>pipeline {
    agent {
        label "linux_ppc64le"
    }
    stages {
        stage("Checkout Infrastructure") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
                script {
                    def major = "13"

                    if (BOOT_JDK_MAJOR?.trim()) {
                        major = BOOT_JDK_MAJOR
                    } else if (!major?.trim()) {
                        def match = (SAPMACHINE_GIT_BRANCH =~ /sapmachine(\d*)/)
                        if (match &amp;&amp;
                            match[0]) {
                            major = match[0][1]
                        }
                    }

                    if (!major?.trim()) {
                        major = "9999"
                    }

                    sh "python SapMachine-Infrastructure/lib/download_boot_jdk.py -m ${major} -d `pwd`"
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_14_04_ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            environment {
                BOOT_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build.sh'
            }
            post {
                success {
                    junit 'gtest.xml'
                }
            }
        }
        stage('Copy JTREG Artifacts') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_14_04_ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                expression { params.RUN_TESTS == true }
            }
            steps {
                script {
                    step ([$class: 'CopyArtifact',
                    projectName: 'jtreg',
                    filter: "jtreg.zip",
                    target: 'jtreg']);
                }
                sh 'cd jtreg &amp;&amp; unzip jtreg.zip'
            }
        }
        stage('Run Dacapo') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_14_04_ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                expression { params.RUN_DACAPO == true }
            }
            environment {
                DACAPO_CP='${DACAPO_CLASSPATH}'
            }
            steps {
                sh "echo 'run dacapo'"
                sh "python --version"
                sh "python SapMachine-Infrastructure/lib/run_dacapo.py ${env.DACAPO_CP}"
            }
        }
        stage('Run jtreg hotspot') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_14_04_ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                expression { params.RUN_TESTS == true &amp;&amp; params.hotspot_test_groups }
            }
            environment {
              SCIMARK_2_CP = '/opt/scimark2/scimark2lib.jar'
              TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.hotspot_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_14_04_ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                expression { params.RUN_TESTS == true &amp;&amp; params.jdk_test_groups }
            }
            environment {
              TESTSUITE = 'jdk'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_14_04_ppc64le"
        reuseNode true
        label "linux_ppc64le"
    }
}

            when {
                expression { params.RUN_TESTS == true &amp;&amp; params.langtools_test_groups }
            }
            environment {
              TESTSUITE = 'langtools'
            }
            steps {
                sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.langtools_test_groups}  || true"

                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            steps {
                archive 'test.zip'
                archive 'support_gensrc.zip'
                archive '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                }
            }
        }
        stage('Build Windows Installer') {
            when {
                expression { JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }
            }
            environment {
              GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    script {
                        def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                        jdk_bundle_name = jdk_bundle_name.trim()

                        sh "rm -f *.msi"
                        sh "python SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${jdk_bundle_name}"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                    }
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            environment {
              SAPMACHINE_PUBLISH_GITHUB_TOKEN = credentials('SapMachine-Github-Token')
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish.sh
                    '''
                }
            }
        }
        stage('Publish Windows Installer') {
            when {
                expression { params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }
            }
            environment {
              GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    sh "SapMachine-infrastructure/lib/publish_msi.sh"
                }
            }
        }
        stage('Publish Website Data') {
            when {
                expression { params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/}
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'debian-package', propagate: false, wait: true, parameters:
                    [
                        string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                        [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                    ]
            }
        }
        stage('Generate Dockerfiles') {
            when {
                expression { params.PUBLISH == true &amp;&amp; params.RELEASE == true &amp;&amp; JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }
            }
            steps {
                build job: 'generate-dockerfiles', propagate: false, wait: true
            }
        }
    }
    post {
        unsuccessful {
           script {
               if (!(JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/)) {
                   sh 'zip -rq workspace.zip .'
                   archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
               }
           }
        }
        cleanup {
            cleanWs deleteDirs: true, disableDeferredWipeout: true
        }
    }
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>