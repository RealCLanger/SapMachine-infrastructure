<flow-definition plugin="workflow-job@2.42">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.9.2" />
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.9.2">
      <jobProperties />
      <triggers />
      <parameters />
      <options />
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>This project is generated. Do not modify manually.&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
      <abortPrevious>false</abortPrevious>
    </org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.1">
      <projectUrl>https://github.com/jvm-profiling-tools/async-profiler</projectUrl>
      <displayName />
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers />
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>ASYNCPROF_GIT_REPOSITORY</name>
          <description>The Git repository to use.</description>
          <defaultValue>https://github.com/jvm-profiling-tools/async-profiler.git</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ASYNCPROF_GIT_BRANCH</name>
          <description>The Git branch to build.</description>
          <defaultValue>master</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_TAG_NAME</name>
          <description>The Git tag to build.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_NUMBER</name>
          <description>Sets the version build number explicitly.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_JDK</name>
          <description>The JDK used to build the async profiler</description>
          <defaultValue>17</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ASYNCPROF_ARCHIVE_NAME_PREFIX</name>
          <description>The prefix of the bundle archive.</description>
          <defaultValue>asyncprofiler2-linux_x86_64</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>_CONFIGURE_SYSROOT</name>
          <description>Sysroot configuration passed to configure script.</description>
          <defaultValue>--with-sysroot=/opt/sysroot-sles11-x86_64</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EXTRA_CONFIGURE_OPTIONS</name>
          <description>Configure options passed directly to configure script.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RELEASE</name>
          <description>When set to true, marks this build as a release build, otherwise as pre-release.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.94">
    <script>pipeline {
    environment {
        GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
    }
    agent {
        label "linux_x86_64"
    }
    stages {
        stage("Init") {
            steps {
                script {
                    env.VERIFICATION_RESULT = "1"
                }
                cleanWs deleteDirs: true, disableDeferredWipeout: true
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage("Checkout Repository") {
            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                checkout changelog: true, poll: false, scm: [$class: 'GitSCM', branches: [[name: "*/${params.ASYNCPROF_GIT_BRANCH}"]], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'async-profiler']], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: "${params.ASYNCPROF_GIT_REPOSITORY}"]]]
            }
        }
        stage('Download Prerequisites') {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04_x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                script {
                    sh "pip3 install --upgrade pip | true"
                    sh "pip3 install requests | true"
                    sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -m ${params.BUILD_JDK} -d `pwd`"
                }
            }
        }
        stage("Build") {
            agent {
    dockerfile {
        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_18_04_x86_64"
        reuseNode true
        label "linux_x86_64"
    }
}

            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            environment {
                BUILD_JDK = "${WORKSPACE}/boot_jdk"
            }
            steps {
                sh 'SapMachine-Infrastructure/lib/build_asyncprof.sh'
            }
        }
        stage('Archive') {
            when {
                beforeAgent true
                expression { env.VERIFICATION_RESULT != "2" }
            }
            steps {
                archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"
                    def symbols_bundle_name = readFile "${env.WORKSPACE}/symbols_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { env.VERIFICATION_RESULT != "2" &amp;&amp; params.PUBLISH == true &amp;&amp; JOB_NAME ==~ /((\S*)(release)(\S*))/ &amp;&amp; !(JOB_NAME ==~ /((\S*)(release-macos)(\S*))/ &amp;&amp; params.RELEASE == true) }
            }
            environment {
                GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
            }
            steps {
                withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                    sh '''
                    SapMachine-Infrastructure/lib/publish_async_prof.sh
                    '''
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                    archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                }
            }
        }
    }
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>