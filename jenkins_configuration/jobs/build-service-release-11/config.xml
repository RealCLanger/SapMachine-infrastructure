<flow-definition plugin="workflow-job@2.35">
  <actions />
  <description>This project is generated. Do not modify manually.&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>14</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>7</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SAPMACHINE_GIT_REPOSITORY</name>
          <description>The Git repository to use.</description>
          <defaultValue>https://github.com/SAP/SapMachine.git</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SAPMACHINE_GIT_BRANCH</name>
          <description>The Git branch to build.</description>
          <defaultValue>sapmachine11</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>GIT_TAG_NAME</name>
          <description />
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BUILD_NUMBER</name>
          <description>Sets the version build number explicitely.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>EXTRA_CONFIGURE_OPTIONS</name>
          <description>Configure options passed directly to configure script.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BOOT_JDK_MAJOR</name>
          <description>Specify the boot JDK major version explicitly.</description>
          <defaultValue />
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_LINUX_X86_64</name>
          <description />
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_LINUX_PPC64LE</name>
          <description />
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_LINUX_PPC64</name>
          <description />
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_WINDOWS_X86_64</name>
          <description />
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>BUILD_MACOS_X86_64</name>
          <description />
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RUN_TESTS</name>
          <description>enable/disable jtreg runs</description>
          <defaultValue>true</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>PUBLISH</name>
          <description>When set to true, the resulting bundles will be published to GitHub. (Only used in release builds!)</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>RELEASE</name>
          <description>When set to true, marks this build as a release build, otherwise as pre-release. (Only used in release builds!)</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>hotspot_test_groups</name>
          <description>Select the test group for jtreg hotspot tests. Empty means disabled.</description>
          <defaultValue>:tier1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>jdk_test_groups</name>
          <description>Select the test group for jtreg jdk tests. Empty means disabled.</description>
          <defaultValue>:tier1</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>langtools_test_groups</name>
          <description>Select the test group for jtreg langtools tests. Empty means disabled.</description>
          <defaultValue>"jdk tools lib"</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.74">
    <script>pipeline {
    agent {
        label 'build_service'
    }
    stages {
        stage('Trigger Builds') {
            parallel {
                stage('Linux x86 64') {
                    when {
                        expression { params.BUILD_LINUX_X86_64 == true }
                    }
                    steps {
                        script {
                            def job_linux_x86_64 = build job: 'build-11-release-linux_x86_64', propagate: false, wait: true, parameters:
                            [
                                string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                string(name: 'BUILD_NUMBER', value: params.BUILD_NUMBER),
                                string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                string(name: 'BOOT_JDK_MAJOR', value: params.BOOT_JDK_MAJOR),
                                string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                                [$class: 'BooleanParameterValue', name: 'RELEASE', value: params.RELEASE]
                            ]

                            env.LINUX_X86_64_JOB_ID = Integer.toString(job_linux_x86_64.getNumber())
                            env.LINUX_X86_64_ARTIFACT_DIR = 'linux_x86_64_' + env.BUILD_NUMBER

                            sh "mkdir -p ${WORKSPACE}/${LINUX_X86_64_ARTIFACT_DIR}"
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build-11-release-linux_x86_64', target: env.LINUX_X86_64_ARTIFACT_DIR, selector:
                            [
                                $class: 'SpecificBuildSelector',
                                buildNumber: env.LINUX_X86_64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.LINUX_X86_64_ARTIFACT_DIR + "/*.tar.gz"
                                step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                            }

                            sh "rm -rf ${WORKSPACE}/${LINUX_X86_64_ARTIFACT_DIR}"
                        }
                    }
                }
                stage('Linux ppc64le') {
                    when {
                        expression { params.BUILD_LINUX_PPC64LE == true }
                    }
                    steps {
                        script {
                            def job_linux_ppc64le = build job: 'build-11-release-linux_ppc64le', propagate: false, wait: true, parameters:
                            [
                                string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                string(name: 'BUILD_NUMBER', value: params.BUILD_NUMBER),
                                string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                string(name: 'BOOT_JDK_MAJOR', value: params.BOOT_JDK_MAJOR),
                                string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                                [$class: 'BooleanParameterValue', name: 'RELEASE', value: params.RELEASE]
                            ]

                            env.LINUX_PPC64LE_JOB_ID = Integer.toString(job_linux_ppc64le.getNumber())
                            env.LINUX_PPC64LE_ARTIFACT_DIR = 'linux_ppc64le_' + env.BUILD_NUMBER

                            sh "mkdir -p ${WORKSPACE}/${LINUX_PPC64LE_ARTIFACT_DIR}"
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build-11-release-linux_ppc64le', target: env.LINUX_PPC64LE_ARTIFACT_DIR, selector:
                            [
                                $class: 'SpecificBuildSelector',
                                buildNumber: env.LINUX_PPC64LE_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.LINUX_PPC64LE_ARTIFACT_DIR + "/*.tar.gz"
                                step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                            }

                            sh "rm -rf ${WORKSPACE}/${LINUX_PPC64LE_ARTIFACT_DIR}"
                        }
                    }
                }
                stage('Linux ppc64') {
                    when {
                        expression { params.BUILD_LINUX_PPC64 == true }
                    }
                    steps {
                        script {
                            def job_linux_ppc64 = build job: 'build-11-release-linux_ppc64', propagate: false, wait: true, parameters:
                            [
                                string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                string(name: 'BUILD_NUMBER', value: params.BUILD_NUMBER),
                                string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                string(name: 'BOOT_JDK_MAJOR', value: params.BOOT_JDK_MAJOR),
                                string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                                [$class: 'BooleanParameterValue', name: 'RELEASE', value: params.RELEASE]
                            ]

                            env.LINUX_PPC64_JOB_ID = Integer.toString(job_linux_ppc64.getNumber())
                            env.LINUX_PPC64_ARTIFACT_DIR = 'linux_ppc64_' + env.BUILD_NUMBER

                            sh "mkdir -p ${WORKSPACE}/${LINUX_PPC64_ARTIFACT_DIR}"
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build-11-release-linux_ppc64', target: env.LINUX_PPC64_ARTIFACT_DIR, selector:
                            [
                                $class: 'SpecificBuildSelector',
                                buildNumber: env.LINUX_PPC64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.LINUX_PPC64_ARTIFACT_DIR + "/*.tar.gz"
                                step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                            }

                            sh "rm -rf ${WORKSPACE}/${LINUX_PPC64_ARTIFACT_DIR}"
                        }
                    }
                }
                stage('Windows x86 64') {
                    when {
                        expression { params.BUILD_WINDOWS_X86_64 == true }
                    }
                    steps {
                        script {
                            def job_windows_x86_64 = build job: 'build-11-release-windows_x86_64', propagate: false, wait: true, parameters:
                            [
                                string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                string(name: 'BUILD_NUMBER', value: params.BUILD_NUMBER),
                                string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                string(name: 'BOOT_JDK_MAJOR', value: params.BOOT_JDK_MAJOR),
                                string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                                [$class: 'BooleanParameterValue', name: 'RELEASE', value: params.RELEASE]
                            ]

                            env.WINDOWS_X86_64_JOB_ID = Integer.toString(job_windows_x86_64.getNumber())
                            env.WINDOWS_X86_64_ARTIFACT_DIR = 'windows_x86_64_' + env.BUILD_NUMBER

                            sh "mkdir -p ${WORKSPACE}/${WINDOWS_X86_64_ARTIFACT_DIR}"
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: 'sapmachine-*.zip', projectName: 'build-11-release-windows_x86_64', target: env.WINDOWS_X86_64_ARTIFACT_DIR, selector:
                            [
                                $class: 'SpecificBuildSelector',
                                buildNumber: env.WINDOWS_X86_64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.WINDOWS_X86_64_ARTIFACT_DIR + "/*.zip"
                                step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                            }

                            copyArtifacts filter: 'sapmachine-*.msi', projectName: 'build-11-release-windows_x86_64', target: env.WINDOWS_X86_64_ARTIFACT_DIR, selector:
                            [
                                $class: 'SpecificBuildSelector',
                                buildNumber: env.WINDOWS_X86_64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.WINDOWS_X86_64_ARTIFACT_DIR + "/*.msi"
                                step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                            }

                            sh "rm -rf ${WORKSPACE}/${WINDOWS_X86_64_ARTIFACT_DIR}"
                        }
                    }
                }
                stage('macOS x86 64') {
                    when {
                        expression { params.BUILD_MACOS_X86_64 == true }
                    }
                    steps {
                        script {
                            def job_macos_x86_64 = build job: 'build-11-release-macos_x86_64', propagate: false, wait: true, parameters:
                            [
                                string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                string(name: 'BUILD_NUMBER', value: params.BUILD_NUMBER),
                                string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                string(name: 'BOOT_JDK_MAJOR', value: params.BOOT_JDK_MAJOR),
                                string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                                [$class: 'BooleanParameterValue', name: 'RELEASE', value: params.RELEASE]
                            ]

                            env.MACOS_X86_64_JOB_ID = Integer.toString(job_macos_x86_64.getNumber())
                            env.MACOS_X86_64_ARTIFACT_DIR = 'macos_x86_64_' + env.BUILD_NUMBER

                            sh "mkdir -p ${WORKSPACE}/${MACOS_X86_64_ARTIFACT_DIR}"
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build-11-release-macos_x86_64', target: env.MACOS_X86_64_ARTIFACT_DIR, selector:
                            [
                                $class: 'SpecificBuildSelector',
                                buildNumber: env.MACOS_X86_64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.MACOS_X86_64_ARTIFACT_DIR + "/*.tar.gz"
                                step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                            }

                            sh "rm -rf ${WORKSPACE}/${MACOS_X86_64_ARTIFACT_DIR}"
                        }
                    }
                }
            }
        }
    }
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>