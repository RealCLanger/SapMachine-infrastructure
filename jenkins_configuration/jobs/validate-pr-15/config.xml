<flow-definition plugin="workflow-job@2.36">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.5.1" />
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.5.1">
      <jobProperties />
      <triggers />
      <parameters />
      <options />
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>This project is generated. Do not modify manually.&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.5">
      <projectUrl>https://github.com/SAP/SapMachine</projectUrl>
      <displayName />
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <org.jenkinsci.plugins.github.pullrequest.GitHubPRTrigger plugin="github-pullrequest@0.2.8">
          <spec>H/1 * * * *</spec>
          <triggerMode>HEAVY_HOOKS</triggerMode>
          <cancelQueued>false</cancelQueued>
          <abortRunning>false</abortRunning>
          <skipFirstRun>false</skipFirstRun>
          <repoProviders>
            <com.github.kostyasha.github.integration.generic.repoprovider.GitHubPluginRepoProvider>
              <cacheConnection>true</cacheConnection>
              <manageHooks>true</manageHooks>
              <repoPermission>ADMIN</repoPermission>
            </com.github.kostyasha.github.integration.generic.repoprovider.GitHubPluginRepoProvider>
          </repoProviders>
          <errorsAction>
            <description>GitHub Pull Requests Trigger Errors</description>
            <errors class="java.util.Collections$SynchronizedSet" serialization="custom">
              <java.util.Collections_-SynchronizedCollection>
                <default>
                  <c class="set" />
                  <mutex class="java.util.Collections$SynchronizedSet" reference="../../.." />
                </default>
              </java.util.Collections_-SynchronizedCollection>
            </errors>
          </errorsAction>
          <events>
            <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommitEvent />
            <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommentEvent>
              <comment>retest this please</comment>
            </org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommentEvent>
            <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPROpenEvent />
          </events>
          <preStatus>false</preStatus>
          <branchRestriction>
            <targetBranchList>
              <string>sapmachine</string>
            </targetBranchList>
          </branchRestriction>
        </org.jenkinsci.plugins.github.pullrequest.GitHubPRTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>pipeline {
    agent {
        label 'pr_validation'
    }
    stages {
        stage("Checkout Infrastructure") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage('Verify PR') {
            environment {
            GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
            CONTEXT = "validate-pr-15-linux_x86_64"
            }
            steps {
                script {
                    env.VERIFICATION_RESULT = sh(
                        script: "python SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER}",
                        returnStatus: true
                    )

                    if (env.VERIFICATION_RESULT == "0") {
                        setGitHubPullRequestStatus(context: CONTEXT, state: 'FAILURE', message: 'PR verification failed')
                        error("Pull Request Validation failed")
                    }

                    if (env.VERIFICATION_RESULT == "2") {
                        setGitHubPullRequestStatus(context: CONTEXT, state: 'SUCCESS')
                    }
                }
            }
        }
        stage('Trigger Builds') {
            parallel {
                stage('Build linux_x86_64') {
                    when {
                        expression {
                            env.VERIFICATION_RESULT == "1"
                        }
                    }
                    environment {
                        GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                        CONTEXT = "validate-pr-15-linux_x86_64"
                    }
                    steps {
                        script {
                            setGitHubPullRequestStatus context: CONTEXT, state: 'PENDING'

                            def job = build job: 'build-15-pr-validation-linux_x86_64', propagate: false, wait: true, parameters:
                                [
                                    string(name: 'GITHUB_PR_NUMBER', value: env.GITHUB_PR_NUMBER),
                                    booleanParam(name: 'PUBLISH', value: false),
                                    booleanParam(name: 'RUN_TESTS', value: true),
                                ]

                            if (job.result == 'SUCCESS') {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'SUCCESS'
                            } else  if (job.result == 'UNSTABLE') {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE', message: 'tests failed'
                            } else {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE', message: 'build failed'
                            }
                        }
                    }
                }
                stage('Build linux_ppc64le') {
                    when {
                        expression {
                            env.VERIFICATION_RESULT == "1"
                        }
                    }
                    environment {
                        GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                        CONTEXT = "validate-pr-15-linux_ppc64le"
                    }
                    steps {
                        script {
                            setGitHubPullRequestStatus context: CONTEXT, state: 'PENDING'

                            def job = build job: 'build-15-pr-validation-linux_ppc64le', propagate: false, wait: true, parameters:
                                [
                                    string(name: 'GITHUB_PR_NUMBER', value: env.GITHUB_PR_NUMBER),
                                    booleanParam(name: 'PUBLISH', value: false),
                                    booleanParam(name: 'RUN_TESTS', value: true),
                                ]

                            if (job.result == 'SUCCESS') {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'SUCCESS'
                            } else  if (job.result == 'UNSTABLE') {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE', message: 'tests failed'
                            } else {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE', message: 'build failed'
                            }
                        }
                    }
                }
                stage('Build linux_ppc64') {
                    when {
                        expression {
                            env.VERIFICATION_RESULT == "1"
                        }
                    }
                    environment {
                        GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                        CONTEXT = "validate-pr-15-linux_ppc64"
                    }
                    steps {
                        script {
                            setGitHubPullRequestStatus context: CONTEXT, state: 'PENDING'

                            def job = build job: 'build-15-pr-validation-linux_ppc64', propagate: false, wait: true, parameters:
                                [
                                    string(name: 'GITHUB_PR_NUMBER', value: env.GITHUB_PR_NUMBER),
                                    booleanParam(name: 'PUBLISH', value: false),
                                    booleanParam(name: 'RUN_TESTS', value: true),
                                ]

                            if (job.result == 'SUCCESS') {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'SUCCESS'
                            } else  if (job.result == 'UNSTABLE') {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE', message: 'tests failed'
                            } else {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE', message: 'build failed'
                            }
                        }
                    }
                }
                stage('Build macos_x86_64') {
                    when {
                        expression {
                            env.VERIFICATION_RESULT == "1"
                        }
                    }
                    environment {
                        GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                        CONTEXT = "validate-pr-15-macos_x86_64"
                    }
                    steps {
                        script {
                            setGitHubPullRequestStatus context: CONTEXT, state: 'PENDING'

                            def job = build job: 'build-15-pr-validation-macos_x86_64', propagate: false, wait: true, parameters:
                                [
                                    string(name: 'GITHUB_PR_NUMBER', value: env.GITHUB_PR_NUMBER),
                                    booleanParam(name: 'PUBLISH', value: false),
                                    booleanParam(name: 'RUN_TESTS', value: true),
                                ]

                            if (job.result == 'SUCCESS') {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'SUCCESS'
                            } else  if (job.result == 'UNSTABLE') {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE', message: 'tests failed'
                            } else {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE', message: 'build failed'
                            }
                        }
                    }
                }
                stage('Build windows_x86_64') {
                    when {
                        expression {
                            env.VERIFICATION_RESULT == "1"
                        }
                    }
                    environment {
                        GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                        CONTEXT = "validate-pr-15-windows_x86_64"
                    }
                    steps {
                        script {
                            setGitHubPullRequestStatus context: CONTEXT, state: 'PENDING'

                            def job = build job: 'build-15-pr-validation-windows_x86_64', propagate: false, wait: true, parameters:
                                [
                                    string(name: 'GITHUB_PR_NUMBER', value: env.GITHUB_PR_NUMBER),
                                    booleanParam(name: 'PUBLISH', value: false),
                                    booleanParam(name: 'RUN_TESTS', value: true),
                                ]

                            if (job.result == 'SUCCESS') {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'SUCCESS'
                            } else  if (job.result == 'UNSTABLE') {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE', message: 'tests failed'
                            } else {
                                setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE', message: 'build failed'
                            }
                        }
                    }
                }
            }
        }
    }
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>