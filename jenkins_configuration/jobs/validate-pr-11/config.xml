<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.31">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.4.1"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.4.1">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>This project is generated. Do not modify manually.&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <org.jenkinsci.plugins.github.pullrequest.GitHubPRTrigger plugin="github-pullrequest@0.2.4">
          <spec>H/1 * * * *</spec>
          <triggerMode>HEAVY_HOOKS</triggerMode>
          <cancelQueued>false</cancelQueued>
          <abortRunning>false</abortRunning>
          <skipFirstRun>false</skipFirstRun>
          <repoProviders>
            <com.github.kostyasha.github.integration.generic.repoprovider.GitHubPluginRepoProvider>
              <cacheConnection>true</cacheConnection>
              <manageHooks>true</manageHooks>
              <repoPermission>ADMIN</repoPermission>
            </com.github.kostyasha.github.integration.generic.repoprovider.GitHubPluginRepoProvider>
          </repoProviders>
          <errorsAction>
            <description>GitHub Pull Requests Trigger Errors</description>
            <errors class="java.util.Collections$SynchronizedSet" serialization="custom">
              <java.util.Collections_-SynchronizedCollection>
                <default>
                  <c class="set"/>
                  <mutex class="java.util.Collections$SynchronizedSet" reference="../../.."/>
                </default>
              </java.util.Collections_-SynchronizedCollection>
            </errors>
          </errorsAction>
          <events>
            <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommitEvent/>
            <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommentEvent>
              <comment>retest this please</comment>
            </org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommentEvent>
            <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPROpenEvent/>
          </events>
          <preStatus>false</preStatus>
          <branchRestriction>
            <targetBranchList>
              <string>sapmachine11</string>
            </targetBranchList>
          </branchRestriction>
        </org.jenkinsci.plugins.github.pullrequest.GitHubPRTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.29.4">
      <projectUrl>https://github.com/SAP/SapMachine</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.63">
    <script>pipeline {
    agent {
        label &apos;linux_x86_64&apos;
    }
    stages {
        stage(&quot;Checkout Infrastructure&quot;) {
            steps {
                checkout changelog: false, poll: false, scm: [$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &apos;RelativeTargetDirectory&apos;, relativeTargetDir: &apos;SapMachine-Infrastructure&apos;]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &apos;SapMachine-github&apos;, url: &apos;https://github.com/SAP/SapMachine-infrastructure.git&apos;]]]
            }
        }
        stage(&apos;Verify PR&apos;) {
            environment {
            GITHUB_API_ACCESS_TOKEN = credentials(&apos;SapMachine-Github-Token&apos;)
            CONTEXT = &quot;validate-pr-11-linux_x86_64&quot;
            }
            steps {
                script {
                    env.VERIFICATION_RESULT = sh(
                        script: &quot;python SapMachine-Infrastructure/lib/verify_pr.py -p ${env.GITHUB_PR_NUMBER}&quot;,
                        returnStatus: true
                    )

                    if (env.VERIFICATION_RESULT == &quot;0&quot;) {
                        setGitHubPullRequestStatus(context: CONTEXT, state: &apos;FAILURE&apos;)
                        error(&quot;Pull Request Validation failed&quot;)
                    }

                    if (env.VERIFICATION_RESULT == &quot;2&quot;) {
                        setGitHubPullRequestStatus(context: CONTEXT, state: &apos;SUCCESS&apos;)
                    }
                }
            }
        }
        stage(&apos;Trigger Builds&apos;) {
            parallel {
                stage(&apos;Build linux_x86_64&apos;) {
                    when {
                        expression {
                            env.VERIFICATION_RESULT == &quot;1&quot;
                        }
                    }
                    environment {
                        GITHUB_API_ACCESS_TOKEN = credentials(&apos;SapMachine-Github-Token&apos;)
                        CONTEXT = &quot;validate-pr-11-linux_x86_64&quot;
                    }
                    steps {
                        setGitHubPullRequestStatus context: CONTEXT, state: &apos;PENDING&apos;
                        build job: &apos;build-11-pr-validation-linux_x86_64&apos;, propagate: true, wait: true, parameters:
                            [
                                string(name: &apos;GITHUB_PR_NUMBER&apos;, value: env.GITHUB_PR_NUMBER),
                                booleanParam(name: &apos;PUBLISH&apos;, value: false),
                                booleanParam(name: &apos;RUN_TESTS&apos;, value: true),
                            ]
                    }
                    post {
                        success {
                            setGitHubPullRequestStatus context: CONTEXT, state: &apos;SUCCESS&apos;
                        }
                        failure {
                            setGitHubPullRequestStatus context: CONTEXT, state: &apos;FAILURE&apos;
                        }
                    }
                }
                stage(&apos;Build linux_ppc64le&apos;) {
                    when {
                        expression {
                            env.VERIFICATION_RESULT == &quot;1&quot;
                        }
                    }
                    environment {
                        GITHUB_API_ACCESS_TOKEN = credentials(&apos;SapMachine-Github-Token&apos;)
                        CONTEXT = &quot;validate-pr-11-linux_ppc64le&quot;
                    }
                    steps {
                        setGitHubPullRequestStatus context: CONTEXT, state: &apos;PENDING&apos;
                        build job: &apos;build-11-pr-validation-linux_ppc64le&apos;, propagate: true, wait: true, parameters:
                            [
                                string(name: &apos;GITHUB_PR_NUMBER&apos;, value: env.GITHUB_PR_NUMBER),
                                booleanParam(name: &apos;PUBLISH&apos;, value: false),
                                booleanParam(name: &apos;RUN_TESTS&apos;, value: true),
                            ]
                    }
                    post {
                        success {
                            setGitHubPullRequestStatus context: CONTEXT, state: &apos;SUCCESS&apos;
                        }
                        failure {
                            setGitHubPullRequestStatus context: CONTEXT, state: &apos;FAILURE&apos;
                        }
                    }
                }
                stage(&apos;Build linux_ppc64&apos;) {
                    when {
                        expression {
                            env.VERIFICATION_RESULT == &quot;1&quot;
                        }
                    }
                    environment {
                        GITHUB_API_ACCESS_TOKEN = credentials(&apos;SapMachine-Github-Token&apos;)
                        CONTEXT = &quot;validate-pr-11-linux_ppc64&quot;
                    }
                    steps {
                        setGitHubPullRequestStatus context: CONTEXT, state: &apos;PENDING&apos;
                        build job: &apos;build-11-pr-validation-linux_ppc64&apos;, propagate: true, wait: true, parameters:
                            [
                                string(name: &apos;GITHUB_PR_NUMBER&apos;, value: env.GITHUB_PR_NUMBER),
                                booleanParam(name: &apos;PUBLISH&apos;, value: false),
                                booleanParam(name: &apos;RUN_TESTS&apos;, value: true),
                            ]
                    }
                    post {
                        success {
                            setGitHubPullRequestStatus context: CONTEXT, state: &apos;SUCCESS&apos;
                        }
                        failure {
                            setGitHubPullRequestStatus context: CONTEXT, state: &apos;FAILURE&apos;
                        }
                    }
                }
                stage(&apos;Build macos_x86_64&apos;) {
                    when {
                        expression {
                            env.VERIFICATION_RESULT == &quot;1&quot;
                        }
                    }
                    environment {
                        GITHUB_API_ACCESS_TOKEN = credentials(&apos;SapMachine-Github-Token&apos;)
                        CONTEXT = &quot;validate-pr-11-macos_x86_64&quot;
                    }
                    steps {
                        setGitHubPullRequestStatus context: CONTEXT, state: &apos;PENDING&apos;
                        build job: &apos;build-11-pr-validation-macos_x86_64&apos;, propagate: true, wait: true, parameters:
                            [
                                string(name: &apos;GITHUB_PR_NUMBER&apos;, value: env.GITHUB_PR_NUMBER),
                                booleanParam(name: &apos;PUBLISH&apos;, value: false),
                                booleanParam(name: &apos;RUN_TESTS&apos;, value: true),
                            ]
                    }
                    post {
                        success {
                            setGitHubPullRequestStatus context: CONTEXT, state: &apos;SUCCESS&apos;
                        }
                        failure {
                            setGitHubPullRequestStatus context: CONTEXT, state: &apos;FAILURE&apos;
                        }
                    }
                }
                stage(&apos;Build windows_x86_64&apos;) {
                    when {
                        expression {
                            env.VERIFICATION_RESULT == &quot;1&quot;
                        }
                    }
                    environment {
                        GITHUB_API_ACCESS_TOKEN = credentials(&apos;SapMachine-Github-Token&apos;)
                        CONTEXT = &quot;validate-pr-11-windows_x86_64&quot;
                    }
                    steps {
                        setGitHubPullRequestStatus context: CONTEXT, state: &apos;PENDING&apos;
                        build job: &apos;build-11-pr-validation-windows_x86_64&apos;, propagate: true, wait: true, parameters:
                            [
                                string(name: &apos;GITHUB_PR_NUMBER&apos;, value: env.GITHUB_PR_NUMBER),
                                booleanParam(name: &apos;PUBLISH&apos;, value: false),
                                booleanParam(name: &apos;RUN_TESTS&apos;, value: true),
                            ]
                    }
                    post {
                        success {
                            setGitHubPullRequestStatus context: CONTEXT, state: &apos;SUCCESS&apos;
                        }
                        failure {
                            setGitHubPullRequestStatus context: CONTEXT, state: &apos;FAILURE&apos;
                        }
                    }
                }
            }
        }
    }
}
</script>
    <sandbox>false</sandbox>
  </definition>
  <disabled>false</disabled>
</flow-definition>