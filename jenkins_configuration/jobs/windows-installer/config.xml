<?xml version="1.0" encoding="UTF-8"?><flow-definition plugin="workflow-job">
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps">
    <script>pipeline {
    agent {
        label 'wix_toolset'
    }
    stages {
        stage("Checkout Infrastructure") {
            steps {
                checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
            }
        }
        stage('Build') {
            environment {
              GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
            }
            steps {
              withCredentials([
                    [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                    ]) {
                  sh "rm -f *.msi"
                  sh "python SapMachine-Infrastructure/lib/make_msi.py --tag=${params.GIT_TAG_NAME} --templates-directory=SapMachine-Infrastructure/wix-templates"
              }
            }
            post {
                success {
                    archive "*.msi"
                }
            }
        }
        stage('Deploy') {
            when {
                expression { params.DEPLOY == true }
            }
            environment {
              GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
            }
            steps {
              sh "SapMachine-infrastructure/lib/publish_msi.sh"
            }
        }
    }
    post {
        always {
            cleanWs deleteDirs: true, disableDeferredWipeout: true
        }
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <actions/>
  <description>This project is generated. Do not modify manually.&lt;!-- Managed by Jenkins Job Builder --&gt;</description>
  <keepDependencies>false</keepDependencies>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <concurrentBuild>false</concurrentBuild>
  <canRoam>true</canRoam>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>GIT_TAG_NAME</name>
          <description>The Git tag to create a Windows installer from.</description>
          <defaultValue/>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>DEPLOY</name>
          <description>When set to true, the resulting installer will be deployed.</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <publishers/>
  <buildWrappers/>
</flow-definition>