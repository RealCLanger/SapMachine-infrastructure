- job:
    name: upload-ossrh
    description: 'Upload SapMachine artefacts to OSSRH (Maven Central).'
    project-type: pipeline
    concurrent: false
    parameters:
        - string:
            name: VERSION
            description: "The version to publish. E.g. '11.0.14'"
    dsl: |
        pipeline {
            agent {
                label "repository"
            }
            stages {
                stage("Checkout Infrastructure Repository") {
                    steps {
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
                    }
                }
                stage('Upload') {
                    agent {
                        dockerfile {
                            dir "SapMachine-Infrastructure/dockerfiles/infrastructure"
                            reuseNode true
                            label "repository"
                        }
                    }
                    steps {
                        withCredentials([file(credentialsId: 'SapMachine-secret-gpg-key', variable: 'GPGSEC'),file(credentialsId: 'OSSRH_SETTINGS', variable: 'OSSRH_SETTINGS_XML')]) {
                            sh 'gpg --import $GPGSEC'
                            sh 'mvn -B --no-transfer-progress --settings $OSSRH_SETTINGS_XML -f SapMachine-Infrastructure/lib/ossrh_upload.pom -Dtype=jre -Dversion=$VERSION -DartefactSetVersion=`echo $VERSION | cut -d . -f 1` clean deploy'
                            sh 'mvn -B --no-transfer-progress --settings $OSSRH_SETTINGS_XML -f SapMachine-Infrastructure/lib/ossrh_upload.pom -Dtype=jdk -Dversion=$VERSION -DartefactSetVersion=`echo $VERSION | cut -d . -f 1` clean deploy'
                            sh 'rm -fr ~/.gnupg/* $GPGSEC $OSSRH_SETTINGS_XML'
                        }
                    }
                }
            }
            post {
                always {
                    cleanWs deleteDirs: true, disableDeferredWipeout: true
                }
            }
        }
