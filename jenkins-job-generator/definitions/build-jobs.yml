- defaults:
    name: 'global'
    publish_default: false
    release_default: false
    allow_concurrent_builds: false
    trigger: |
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers/>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    majors: &majors
        - '11':
           branch_name: sapmachine11
        - '16':
           branch_name: sapmachine16
        - '17':
           branch_name: sapmachine17
        - '18':
           branch_name: sapmachine
    platforms: &platforms
        - linux_x86_64:
            configure_sysroot_default: '--with-sysroot=/opt/sysroot-sles11-x86_64 --with-stdc++lib=static'
            docker_agent: |
                agent {{
                    dockerfile {{
                        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_16_04_x86_64"
                        reuseNode true
                        label "{platform}"
                    }}
                }}
        - linux_ppc64le:
            configure_sysroot_default: '--with-sysroot=/opt/sysroot-sles12-ppc64le --with-stdc++lib=static'
            docker_agent: |
                agent {{
                    dockerfile {{
                        dir "SapMachine-Infrastructure/dockerfiles/ubuntu_14_04_ppc64le"
                        reuseNode true
                        label "{platform}"
                    }}
                }}
        - macos_x86_64:
            configure_sysroot_default: ''
            docker_agent: ''
        - macos_aarch64:
            configure_sysroot_default: ''
            docker_agent: ''
        - linux_aarch64:
            configure_sysroot_default: '--disable-warnings-as-errors --with-devkit=/opt/devkits/aarch64-linux-gnu-to-aarch64-linux-gnu-fedora-21-gcc-9.2.0'
            docker_agent: ''
        - linux_ppc64:
            configure_sysroot_default: '--with-devkit=/opt/devkits/ppc64-linux-gnu-to-ppc64-linux-gnu'
            docker_agent: ''
        - windows_x86_64:
            configure_sysroot_default: ''
            docker_agent: ''
    build_types: &build_types
        - snapshot
        - release
        - pr-validation:
            trigger: |
                <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
                    <triggers>
                        <org.jenkinsci.plugins.github.pullrequest.GitHubPRTrigger plugin="github-pullrequest@0.2.4">
                            <spec>H/1 * * * *</spec>
                            <triggerMode>HEAVY_HOOKS</triggerMode>
                            <cancelQueued>true</cancelQueued>
                            <abortRunning>false</abortRunning>
                            <skipFirstRun>false</skipFirstRun>
                            <repoProviders>
                                <com.github.kostyasha.github.integration.generic.repoprovider.GitHubPluginRepoProvider>
                                <cacheConnection>true</cacheConnection>
                                <manageHooks>true</manageHooks>
                                <repoPermission>ADMIN</repoPermission>
                                </com.github.kostyasha.github.integration.generic.repoprovider.GitHubPluginRepoProvider>
                            </repoProviders>
                            <errorsAction>
                                <description>GitHub Pull Requests Trigger Errors</description>
                                <errors class="java.util.Collections$SynchronizedSet" serialization="custom">
                                <java.util.Collections_-SynchronizedCollection>
                                    <default>
                                    <c class="set"/>
                                    <mutex class="java.util.Collections$SynchronizedSet" reference="../../.."/>
                                    </default>
                                </java.util.Collections_-SynchronizedCollection>
                                </errors>
                            </errorsAction>
                            <events>
                                <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommitEvent/>
                                <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommentEvent>
                                <comment>retest this please</comment>
                                </org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommentEvent>
                                <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPROpenEvent/>
                            </events>
                            <preStatus>false</preStatus>
                            <branchRestriction>
                                <targetBranchList>
                                <string>{branch_name}</string>
                                </targetBranchList>
                            </branchRestriction>
                        </org.jenkinsci.plugins.github.pullrequest.GitHubPRTrigger>
                    </triggers>
                </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>

- project:
    name: builds
    major: *majors
    build_type: *build_types
    platform: *platforms
    exclude:
        - platform: macos_aarch64
          major: '11'
        - platform: macos_aarch64
          major: '16'
    jobs:
        - build-{major}-{build_type}-{platform}

- project:
    name: service-builds
    major: *majors
    build_type:
        - snapshot
        - release
    platform: *platforms
    jobs:
        - build-service-{build_type}-{major}

- project:
    name: branch-builds
    major:
        - 'user':
           branch_name: sapmachine
    build_type: branch
    platform: *platforms
    jobs:
        - build-{major}-{build_type}-{platform}
        - build-service-{build_type}-{major}

- job-template:
    name: build-{major}-{build_type}-{platform}
    description: 'This project is generated. Do not modify manually.'
    project-type: pipeline
    concurrent: '{allow_concurrent_builds}'
    properties:
        - github:
            url: 'https://github.com/SAP/SapMachine'
        - build-discarder:
            num-to-keep: 100
            artifact-num-to-keep: 1
        - raw:
            xml: '{trigger}'
    parameters:
        - string:
            name: SAPMACHINE_GIT_REPOSITORY
            default: 'https://github.com/SAP/SapMachine.git'
            description: 'The Git repository to use.'
        - string:
            name: SAPMACHINE_GIT_BRANCH
            default: '{branch_name}'
            description: 'The Git branch to build.'
        - string:
            name: GIT_TAG_NAME
            default: ''
            description: 'The Git tag to build.'
        - string:
            name: BUILD_NUMBER
            default: ''
            description: 'Sets the version build number explicitly.'
        - string:
            name: SAPMACHINE_ARCHIVE_NAME_PREFIX
            default: 'sapmachine{major}-{platform}'
            description: 'The prefix of the bundle archive.'
        - string:
            name: _CONFIGURE_SYSROOT
            default: '{configure_sysroot_default}'
            description: 'Sysroot configuration passed to configure script.'
        - string:
            name: EXTRA_CONFIGURE_OPTIONS
            default: ''
            description: 'Configure options passed directly to configure script.'
        - string:
            name: BOOT_JDK_MAJOR
            default: ''
            description: 'Specify the boot JDK major version explicitly.'
        - string:
            name: hotspot_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg hotspot tests. Empty means disabled.'
        - string:
            name: jdk_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg jdk tests. Empty means disabled.'
        - string:
            name: langtools_test_groups
            default: '"jdk tools lib"'
            description: 'Select the test group for jtreg langtools tests. Empty means disabled.'
        - bool:
            name: RUN_TESTS
            default: true
            description: 'enable/disable jtreg runs'
        - bool:
            name: RUN_DACAPO
            default: false
            description: 'enable/disable dacapo run'
        - bool:
            name: PUBLISH
            default: '{publish_default}'
            description: 'When set to true, the resulting bundles will be published to GitHub.'
        - bool:
            name: RELEASE
            default: '{release_default}'
            description: 'When set to true, marks this build as a release build, otherwise as pre-release.'

    dsl: |
        pipeline {{
            environment {{
                GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
            }}
            agent {{
                label "{platform}"
            }}
            stages {{
                stage("Init") {{
                    steps {{
                        script {{
                            if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {{
                                setGitHubPullRequestStatus context: "validate-pr-{major}-{platform}", state: 'PENDING'
                            }}
                            env.VERIFICATION_RESULT = "1"
                        }}
                        cleanWs deleteDirs: true, disableDeferredWipeout: true
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
                        script {{
                            if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {{
                                def platform = "{platform}"
                                env.COMMENT = ""
                                if (platform == 'linux_x86_64') {{
                                    env.COMMENT = "-c"
                                }}
                                env.VERIFICATION_RESULT = sh(
                                    script: "python3 SapMachine-Infrastructure/lib/verify_pr.py -p ${{env.GITHUB_PR_NUMBER}} ${{env.COMMENT}}",
                                    returnStatus: true
                                )

                                if (env.VERIFICATION_RESULT == "0") {{
                                    error("Pull Request Verification failed")
                                }}
                            }}
                        }}
                    }}
                }}
                stage("Checkout Repository") {{
                    when {{
                        expression {{ env.VERIFICATION_RESULT != "2" }}
                    }}
                    steps {{
                        checkout changelog: true, poll: false, scm: [$class: 'GitSCM', branches: [[name: "*/${{params.SAPMACHINE_GIT_BRANCH}}"]], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine']], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine.git']]]
                    }}
                }}
                stage('Download Prerequisites') {{
                    when {{
                        expression {{ env.VERIFICATION_RESULT != "2" }}
                    }}
                    steps {{
                        script {{
                            def major = "{major}"

                            if (BOOT_JDK_MAJOR?.trim()) {{
                                major = BOOT_JDK_MAJOR
                            }} else if (!major?.trim()) {{
                                def match = (SAPMACHINE_GIT_BRANCH =~ /sapmachine(\d*)/)
                                if (match && match[0]) {{
                                    major = match[0][1]
                                }}
                            }}

                            if (!major?.trim()) {{
                                major = "9999"
                            }}

                            sh "python3 SapMachine-Infrastructure/lib/download_boot_jdk.py -m ${{major}} -d `pwd`"
                            checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: 'refs/tags/release-1.8.1']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'gtest']], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/google/googletest.git']]]
                        }}
                    }}
                }}
                stage("Build") {{
                    {docker_agent}
                    when {{
                        beforeAgent true
                        expression {{ env.VERIFICATION_RESULT != "2" }}
                    }}
                    environment {{
                        BOOT_JDK = "${{WORKSPACE}}/boot_jdk"
                    }}
                    steps {{
                        sh 'SapMachine-Infrastructure/lib/build.sh'
                    }}
                }}
                stage('Copy JTREG') {{
                    {docker_agent}
                    when {{
                        beforeAgent true
                        expression {{ env.VERIFICATION_RESULT != "2" && params.RUN_TESTS == true }}
                    }}
                    steps {{
                        sh "python3 SapMachine-Infrastructure/lib/download_jtreg.py -m ${{major}} -d `pwd`"
                    }}
                }}
                stage('Run jtreg hotspot') {{
                    {docker_agent}
                    when {{
                        beforeAgent true
                        expression {{ env.VERIFICATION_RESULT != "2" && params.RUN_TESTS == true && params.hotspot_test_groups }}
                    }}
                    environment {{
                        SCIMARK_2_CP = '/opt/scimark2/scimark2lib.jar'
                        TESTSUITE = 'hotspot'
                    }}
                    steps {{
                        sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${{env.TESTSUITE}} ${{params.hotspot_test_groups}} || true"
                        publishHTML target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "test_report_${{env.TESTSUITE}}",
                            reportFiles: 'JTreport/index.html',
                            reportName: "JT Report ${{env.TESTSUITE}}"
                        ]
                        junit "test_report_${{env.TESTSUITE}}/JTwork/**/*.jtr.xml"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log"
                    }}
                }}
                stage('Run jtreg jdk') {{
                    {docker_agent}
                    when {{
                        beforeAgent true
                        expression {{ env.VERIFICATION_RESULT != "2" && params.RUN_TESTS == true && params.jdk_test_groups }}
                    }}
                    environment {{
                        TESTSUITE = 'jdk'
                    }}
                    steps {{
                        sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${{env.TESTSUITE}} ${{params.jdk_test_groups}} || true"

                        publishHTML target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "test_report_${{env.TESTSUITE}}",
                            reportFiles: 'JTreport/index.html',
                            reportName: "JT Report ${{env.TESTSUITE}}"
                        ]
                        junit "test_report_${{env.TESTSUITE}}/JTwork/**/*.jtr.xml"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log"
                    }}
                }}
                stage('Run jtreg langtools') {{
                    {docker_agent}
                    when {{
                        beforeAgent true
                        expression {{ env.VERIFICATION_RESULT != "2" && params.RUN_TESTS == true && params.langtools_test_groups }}
                    }}
                    environment {{
                        TESTSUITE = 'langtools'
                    }}
                    steps {{
                        sh "bash SapMachine-Infrastructure/lib/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${{env.TESTSUITE}} ${{params.langtools_test_groups}} || true"

                        publishHTML target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "test_report_${{env.TESTSUITE}}",
                            reportFiles: 'JTreport/index.html',
                            reportName: "JT Report ${{env.TESTSUITE}}"
                        ]
                        junit "test_report_${{env.TESTSUITE}}/JTwork/**/*.jtr.xml"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log"
                    }}
                }}
                stage('Run Dacapo') {{
                    {docker_agent}
                    when {{
                        beforeAgent true
                        expression {{ env.VERIFICATION_RESULT != "2" && params.RUN_DACAPO == true }}
                    }}
                    environment {{
                        DACAPO_CP='${{DACAPO_CLASSPATH}}'
                    }}
                    steps {{
                        sh "echo 'run dacapo'"
                        sh "python3 --version"
                        sh "python3 SapMachine-Infrastructure/lib/run_dacapo.py ${{env.DACAPO_CP}}"
                    }}
                }}
                stage('Archive') {{
                    when {{
                        beforeAgent true
                        expression {{ env.VERIFICATION_RESULT != "2" }}
                    }}
                    steps {{
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'test.zip'
                        archiveArtifacts allowEmptyArchive: true, artifacts: 'support_gensrc.zip'
                        archiveArtifacts allowEmptyArchive: true, artifacts: '*.dmg'

                        script {{
                            def jdk_bundle_name = readFile "${{env.WORKSPACE}}/jdk_bundle_name.txt"
                            def jre_bundle_name = readFile "${{env.WORKSPACE}}/jre_bundle_name.txt"
                            def symbols_bundle_name = readFile "${{env.WORKSPACE}}/symbols_bundle_name.txt"

                            step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                            step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                            step ([$class: 'ArtifactArchiver', artifacts: symbols_bundle_name]);
                        }}
                    }}
                }}
                stage('Build Windows Installer') {{
                    when {{
                        expression {{ env.VERIFICATION_RESULT != "2" && JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/ }}
                    }}
                    steps {{
                        withCredentials([
                            [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                            ]) {{
                            script {{
                                def jdk_bundle_name = readFile "${{env.WORKSPACE}}/jdk_bundle_name.txt"
                                def jre_bundle_name = readFile "${{env.WORKSPACE}}/jre_bundle_name.txt"
                                jdk_bundle_name = jdk_bundle_name.trim()
                                jre_bundle_name = jre_bundle_name.trim()

                                sh "rm -f *.msi"
                                sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --asset=${{jdk_bundle_name}}"
                                sh "python3 SapMachine-Infrastructure/lib/make_msi.py --sapmachine-directory=`pwd`/SapMachine --jre --asset=${{jre_bundle_name}}"
                                archiveArtifacts allowEmptyArchive: true, artifacts: "*.msi"
                            }}
                        }}
                    }}
                }}
                stage('Publish GitHub') {{
                    when {{
                        expression {{ env.VERIFICATION_RESULT != "2" && params.PUBLISH == true && JOB_NAME ==~ /((\S*)(release)(\S*))/}}
                    }}
                    environment {{
                        SAPMACHINE_PUBLISH_GITHUB_TOKEN = credentials('SapMachine-Github-Token')
                    }}
                    steps {{
                        withCredentials([
                            [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                            ]) {{
                            sh '''
                            SapMachine-Infrastructure/lib/publish.sh
                            '''
                            archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.txt"
                            archiveArtifacts allowEmptyArchive: true, artifacts: "*.sha256.dmg.txt"
                        }}
                    }}
                }}
                stage('Publish Windows Installer') {{
                    when {{
                        expression {{ env.VERIFICATION_RESULT != "2" && params.PUBLISH == true && JOB_NAME ==~ /((\S*)(release-windows_x86_64)(\S*))/ }}
                    }}
                    steps {{
                        withCredentials([
                            [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                            ]) {{
                            sh "SapMachine-Infrastructure/lib/publish_msi.sh"
                        }}
                    }}
                }}
                stage('Publish Website Data') {{
                    when {{
                        expression {{ env.VERIFICATION_RESULT != "2" && params.PUBLISH == true && JOB_NAME ==~ /((\S*)(release)(\S*))/}}
                    }}
                    steps {{
                        build job: 'generate-website-data', propagate: false, wait: false
                    }}
                }}
                stage('Publish CF Java Buildpack Data') {{
                    when {{
                        expression {{ env.VERIFICATION_RESULT != "2" && params.PUBLISH == true && params.RELEASE == true && JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }}
                    }}
                    steps {{
                        build job: 'generate-cf-java-buildpack-data', propagate: false, wait: false
                    }}
                }}
                stage('Publish Debian Linux Packages') {{
                    when {{
                        expression {{ env.VERIFICATION_RESULT != "2" && params.PUBLISH == true && params.RELEASE == true && JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }}
                    }}
                    steps {{
                        build job: 'debian-package', propagate: false, wait: true, parameters:
                            [
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                            ]
                    }}
                }}
                stage('Build and Publish RPM Linux Packages') {{
                    when {{
                        expression {{ env.VERIFICATION_RESULT != "2" && params.PUBLISH == true && params.RELEASE == true && JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }}
                    }}
                    steps {{
                        build job: 'rpm-package', propagate: false, wait: true, parameters:
                            [
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                            ]
                    }}
                }}
                stage('Generate Dockerfiles') {{
                    when {{
                        expression {{ env.VERIFICATION_RESULT != "2" && params.PUBLISH == true && params.RELEASE == true && JOB_NAME ==~ /((\S*)(release-linux_x86_64)(\S*))/ }}
                    }}
                    steps {{
                        build job: 'generate-dockerfiles', propagate: false, wait: true
                    }}
                }}
            }}
            post {{
                aborted {{
                    script {{
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {{
                            setGitHubPullRequestStatus context: "validate-pr-{major}-{platform}", state: 'FAILURE', message: 'job aborted'
                        }}
                    }}
                }}
                failure {{
                    script {{
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {{
                            setGitHubPullRequestStatus context: "validate-pr-{major}-{platform}", state: 'FAILURE', message: 'build failed'
                        }}
                    }}
                }}
                unstable {{
                    script {{
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {{
                            setGitHubPullRequestStatus context: "validate-pr-{major}-{platform}", state: 'FAILURE', message: 'tests failed'
                        }}
                    }}
                }}
                success {{
                    script {{
                        if (JOB_NAME ==~ /((\S*)(pr-validation)(\S*))/) {{
                            setGitHubPullRequestStatus context: "validate-pr-{major}-{platform}", state: 'SUCCESS'
                        }}
                    }}
                    cleanWs deleteDirs: true, disableDeferredWipeout: true
                }}
                unsuccessful {{
                    script {{
                        if ((JOB_NAME ==~ /((\S*)(windows_x86_64)(\S*))/) || (JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/)) {{
                            sh 'zip -rq workspace.zip .'
                            archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                        }}
                    }}
                }}
            }}
        }}

- job-template:
    name: build-service-{build_type}-{major}
    description: 'This project is generated. Do not modify manually.'
    project-type: pipeline
    concurrent: true
    properties:
        - build-discarder:
            days-to-keep: 14
            artifact-days-to-keep: 7

    parameters:
        - string:
            name: SAPMACHINE_GIT_REPOSITORY
            default: 'https://github.com/SAP/SapMachine.git'
            description: 'The Git repository to use.'
        - string:
            name: SAPMACHINE_GIT_BRANCH
            default: '{branch_name}'
            description: 'The Git branch to build.'
        - string:
            name: GIT_TAG_NAME
            default: ''
            escription: 'The Git tag to build.'
        - string:
            name: BUILD_NUMBER
            default: ''
            description: 'Sets the version build number explicitely.'
        - string:
            name: EXTRA_CONFIGURE_OPTIONS
            default: ''
            description: 'Configure options passed directly to configure script.'
        - string:
            name: BOOT_JDK_MAJOR
            default: ''
            description: 'Specify the boot JDK major version explicitly.'
        - bool:
            name: BUILD_LINUX_X86_64
            default: true
        - bool:
            name: BUILD_LINUX_PPC64LE
            default: true
        - bool:
            name: BUILD_LINUX_PPC64
            default: true
        - bool:
            name: BUILD_LINUX_AARCH64
            default: true
        - bool:
            name: BUILD_WINDOWS_X86_64
            default: true
        - bool:
            name: BUILD_MACOS_X86_64
            default: true
        - bool:
            name: RUN_TESTS
            default: true
            description: 'enable/disable jtreg runs'
        - bool:
            name: PUBLISH
            default: '{publish_default}'
            description: 'When set to true, the resulting bundles will be published to GitHub. (Only used in release builds!)'
        - bool:
            name: RELEASE
            default: '{release_default}'
            description: 'When set to true, marks this build as a release build, otherwise as pre-release. (Only used in release builds!)'
        - string:
            name: hotspot_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg hotspot tests. Empty means disabled.'
        - string:
            name: jdk_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg jdk tests. Empty means disabled.'
        - string:
            name: langtools_test_groups
            default: '"jdk tools lib"'
            description: 'Select the test group for jtreg langtools tests. Empty means disabled.'

    dsl: |
        pipeline {{
            agent {{
                label 'build_service'
            }}
            stages {{
                stage('Trigger Builds') {{
                    parallel {{
                        stage('Linux x86 64') {{
                            when {{
                                expression {{ params.BUILD_LINUX_X86_64 == true }}
                            }}
                            steps {{
                                script {{
                                    def job_linux_x86_64 = build job: 'build-{major}-{build_type}-linux_x86_64', propagate: false, wait: true, parameters:
                                    [
                                        string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                        string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                        string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                        string(name: 'BUILD_NUMBER', value: params.BUILD_NUMBER),
                                        string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                        string(name: 'BOOT_JDK_MAJOR', value: params.BOOT_JDK_MAJOR),
                                        string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                        string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                        string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                        [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                                        [$class: 'BooleanParameterValue', name: 'RELEASE', value: params.RELEASE]
                                    ]

                                    env.LINUX_X86_64_JOB_ID = Integer.toString(job_linux_x86_64.getNumber())
                                    env.LINUX_X86_64_ARTIFACT_DIR = 'linux_x86_64_' + env.BUILD_NUMBER

                                    sh "mkdir -p ${{WORKSPACE}}/${{LINUX_X86_64_ARTIFACT_DIR}}"
                                }}
                            }}
                            post {{
                                success {{
                                    copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build-{major}-{build_type}-linux_x86_64', target: env.LINUX_X86_64_ARTIFACT_DIR, selector:
                                    [
                                        $class: 'SpecificBuildSelector',
                                        buildNumber: env.LINUX_X86_64_JOB_ID
                                    ]

                                    script {{
                                        def artifacts_selector = env.LINUX_X86_64_ARTIFACT_DIR + "/*.tar.gz"
                                        step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                                    }}

                                    sh "rm -rf ${{WORKSPACE}}/${{LINUX_X86_64_ARTIFACT_DIR}}"
                                }}
                            }}
                        }}
                        stage('Linux ppc64le') {{
                            when {{
                                expression {{ params.BUILD_LINUX_PPC64LE == true }}
                            }}
                            steps {{
                                script {{
                                    def job_linux_ppc64le = build job: 'build-{major}-{build_type}-linux_ppc64le', propagate: false, wait: true, parameters:
                                    [
                                        string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                        string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                        string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                        string(name: 'BUILD_NUMBER', value: params.BUILD_NUMBER),
                                        string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                        string(name: 'BOOT_JDK_MAJOR', value: params.BOOT_JDK_MAJOR),
                                        string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                        string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                        string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                        [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                                        [$class: 'BooleanParameterValue', name: 'RELEASE', value: params.RELEASE]
                                    ]

                                    env.LINUX_PPC64LE_JOB_ID = Integer.toString(job_linux_ppc64le.getNumber())
                                    env.LINUX_PPC64LE_ARTIFACT_DIR = 'linux_ppc64le_' + env.BUILD_NUMBER

                                    sh "mkdir -p ${{WORKSPACE}}/${{LINUX_PPC64LE_ARTIFACT_DIR}}"
                                }}
                            }}
                            post {{
                                success {{
                                    copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build-{major}-{build_type}-linux_ppc64le', target: env.LINUX_PPC64LE_ARTIFACT_DIR, selector:
                                    [
                                        $class: 'SpecificBuildSelector',
                                        buildNumber: env.LINUX_PPC64LE_JOB_ID
                                    ]

                                    script {{
                                        def artifacts_selector = env.LINUX_PPC64LE_ARTIFACT_DIR + "/*.tar.gz"
                                        step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                                    }}

                                    sh "rm -rf ${{WORKSPACE}}/${{LINUX_PPC64LE_ARTIFACT_DIR}}"
                                }}
                            }}
                        }}
                        stage('Linux ppc64') {{
                            when {{
                                expression {{ params.BUILD_LINUX_PPC64 == true }}
                            }}
                            steps {{
                                script {{
                                    def job_linux_ppc64 = build job: 'build-{major}-{build_type}-linux_ppc64', propagate: false, wait: true, parameters:
                                    [
                                        string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                        string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                        string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                        string(name: 'BUILD_NUMBER', value: params.BUILD_NUMBER),
                                        string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                        string(name: 'BOOT_JDK_MAJOR', value: params.BOOT_JDK_MAJOR),
                                        string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                        string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                        string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                        [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                                        [$class: 'BooleanParameterValue', name: 'RELEASE', value: params.RELEASE]
                                    ]

                                    env.LINUX_PPC64_JOB_ID = Integer.toString(job_linux_ppc64.getNumber())
                                    env.LINUX_PPC64_ARTIFACT_DIR = 'linux_ppc64_' + env.BUILD_NUMBER

                                    sh "mkdir -p ${{WORKSPACE}}/${{LINUX_PPC64_ARTIFACT_DIR}}"
                                }}
                            }}
                            post {{
                                success {{
                                    copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build-{major}-{build_type}-linux_ppc64', target: env.LINUX_PPC64_ARTIFACT_DIR, selector:
                                    [
                                        $class: 'SpecificBuildSelector',
                                        buildNumber: env.LINUX_PPC64_JOB_ID
                                    ]

                                    script {{
                                        def artifacts_selector = env.LINUX_PPC64_ARTIFACT_DIR + "/*.tar.gz"
                                        step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                                    }}

                                    sh "rm -rf ${{WORKSPACE}}/${{LINUX_PPC64_ARTIFACT_DIR}}"
                                }}
                            }}
                        }}
                        stage('Linux aarch64') {{
                            when {{
                                expression {{ params.BUILD_LINUX_AARCH64 == true }}
                            }}
                            steps {{
                                script {{
                                    def job_linux_aarch64 = build job: 'build-{major}-{build_type}-linux_aarch64', propagate: false, wait: true, parameters:
                                    [
                                        string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                        string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                        string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                        string(name: 'BUILD_NUMBER', value: params.BUILD_NUMBER),
                                        string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                        string(name: 'BOOT_JDK_MAJOR', value: params.BOOT_JDK_MAJOR),
                                        string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                        string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                        string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                        [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                                        [$class: 'BooleanParameterValue', name: 'RELEASE', value: params.RELEASE]
                                    ]

                                    env.LINUX_AARCH64_JOB_ID = Integer.toString(job_linux_aarch64.getNumber())
                                    env.LINUX_AARCH64_ARTIFACT_DIR = 'linux_aarch64_' + env.BUILD_NUMBER

                                    sh "mkdir -p ${{WORKSPACE}}/${{LINUX_AARCH64_ARTIFACT_DIR}}"
                                }}
                            }}
                            post {{
                                success {{
                                    copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build-{major}-{build_type}-linux_aarch64', target: env.LINUX_AARCH64_ARTIFACT_DIR, selector:
                                    [
                                        $class: 'SpecificBuildSelector',
                                        buildNumber: env.LINUX_AARCH64_JOB_ID
                                    ]

                                    script {{
                                        def artifacts_selector = env.LINUX_AARCH64_ARTIFACT_DIR + "/*.tar.gz"
                                        step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                                    }}

                                    sh "rm -rf ${{WORKSPACE}}/${{LINUX_AARCH64_ARTIFACT_DIR}}"
                                }}
                            }}
                        }}
                        stage('Windows x86 64') {{
                            when {{
                                expression {{ params.BUILD_WINDOWS_X86_64 == true }}
                            }}
                            steps {{
                                script {{
                                    def job_windows_x86_64 = build job: 'build-{major}-{build_type}-windows_x86_64', propagate: false, wait: true, parameters:
                                    [
                                        string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                        string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                        string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                        string(name: 'BUILD_NUMBER', value: params.BUILD_NUMBER),
                                        string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                        string(name: 'BOOT_JDK_MAJOR', value: params.BOOT_JDK_MAJOR),
                                        string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                        string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                        string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                        [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                                        [$class: 'BooleanParameterValue', name: 'RELEASE', value: params.RELEASE]
                                    ]

                                    env.WINDOWS_X86_64_JOB_ID = Integer.toString(job_windows_x86_64.getNumber())
                                    env.WINDOWS_X86_64_ARTIFACT_DIR = 'windows_x86_64_' + env.BUILD_NUMBER

                                    sh "mkdir -p ${{WORKSPACE}}/${{WINDOWS_X86_64_ARTIFACT_DIR}}"
                                }}
                            }}
                            post {{
                                success {{
                                    copyArtifacts filter: 'sapmachine-*.zip', projectName: 'build-{major}-{build_type}-windows_x86_64', target: env.WINDOWS_X86_64_ARTIFACT_DIR, selector:
                                    [
                                        $class: 'SpecificBuildSelector',
                                        buildNumber: env.WINDOWS_X86_64_JOB_ID
                                    ]

                                    script {{
                                        def artifacts_selector = env.WINDOWS_X86_64_ARTIFACT_DIR + "/*.zip"
                                        step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                                    }}

                                    copyArtifacts filter: 'sapmachine-*.msi', projectName: 'build-{major}-{build_type}-windows_x86_64', target: env.WINDOWS_X86_64_ARTIFACT_DIR, selector:
                                    [
                                        $class: 'SpecificBuildSelector',
                                        buildNumber: env.WINDOWS_X86_64_JOB_ID
                                    ]

                                    script {{
                                        def artifacts_selector = env.WINDOWS_X86_64_ARTIFACT_DIR + "/*.msi"
                                        step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                                    }}

                                    sh "rm -rf ${{WORKSPACE}}/${{WINDOWS_X86_64_ARTIFACT_DIR}}"
                                }}
                            }}
                        }}
                        stage('macOS x86 64') {{
                            when {{
                                expression {{ params.BUILD_MACOS_X86_64 == true }}
                            }}
                            steps {{
                                script {{
                                    def job_macos_x86_64 = build job: 'build-{major}-{build_type}-macos_x86_64', propagate: false, wait: true, parameters:
                                    [
                                        string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                        string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                        string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                        string(name: 'BUILD_NUMBER', value: params.BUILD_NUMBER),
                                        string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                        string(name: 'BOOT_JDK_MAJOR', value: params.BOOT_JDK_MAJOR),
                                        string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                        string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                        string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                        [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: params.PUBLISH],
                                        [$class: 'BooleanParameterValue', name: 'RELEASE', value: params.RELEASE]
                                    ]

                                    env.MACOS_X86_64_JOB_ID = Integer.toString(job_macos_x86_64.getNumber())
                                    env.MACOS_X86_64_ARTIFACT_DIR = 'macos_x86_64_' + env.BUILD_NUMBER

                                    sh "mkdir -p ${{WORKSPACE}}/${{MACOS_X86_64_ARTIFACT_DIR}}"
                                }}
                            }}
                            post {{
                                success {{
                                    copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build-{major}-{build_type}-macos_x86_64', target: env.MACOS_X86_64_ARTIFACT_DIR, selector:
                                    [
                                        $class: 'SpecificBuildSelector',
                                        buildNumber: env.MACOS_X86_64_JOB_ID
                                    ]

                                    script {{
                                        def artifacts_selector = env.MACOS_X86_64_ARTIFACT_DIR + "/*.tar.gz"
                                        step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                                    }}

                                    sh "rm -rf ${{WORKSPACE}}/${{MACOS_X86_64_ARTIFACT_DIR}}"
                                }}
                            }}
                        }}
                    }}
                }}
            }}
        }}
