- defaults:
    name: 'global'
    publish_default: false
    release_default: false
    allow_concurrent_builds: false

- project:
    name: snapshot-builds
    major:
        - 11:
           branch_name: sapmachine11
        - 12:
           branch_name: sapmachine12
        - 13:
           branch_name: sapmachine
    build_type: snapshot
    jobs:
        - docker-builds
        - non-docker-builds

- project:
    name: release-builds
    major:
        - 11:
           branch_name: sapmachine11
        - 12:
           branch_name: sapmachine12
        - 13:
           branch_name: sapmachine
    build_type: release
    publish_default: true
    jobs:
        - docker-builds
        - non-docker-builds

- project:
    name: pr-validation-builds
    major:
        - 11:
           branch_name: sapmachine11
        - 12:
           branch_name: sapmachine12
        - 13:
           branch_name: sapmachine
    build_type: pr-validation
    jobs:
        - docker-builds
        - validate-pr-{major}
        - non-docker-builds

- project:
    name: branch-builds
    major:
        - '':
           branch_name: sapmachine
    build_type: branch
    jobs:
        - docker-builds
        - non-docker-builds
        - branch-build-service


- job-group:
    name: docker-builds
    docker_agent: |
            agent {{
                dockerfile {{
                    dir "{docker_dir}"
                    reuseNode true
                    label "{platform}"
                }}
            }}
    platform:
        - linux_x86_64:
            docker_dir: SapMachine-Infrastructure/dockerfiles/ubuntu_14_04_x86_64
            configure_sysroot_default: '--with-sysroot=/opt/sysroot-sles11-x86_64 --with-freetype-lib=/opt/sysroot-sles11-x86_64/usr/lib64 --with-freetype-include=/opt/sysroot-sles11-x86_64/usr/include --with-stdc++lib=static'
        - linux_ppc64le:
            docker_dir: SapMachine-Infrastructure/dockerfiles/ubuntu_14_04_ppc64le
            configure_sysroot_default: '--with-sysroot=/opt/sysroot-sles12-ppc64le --with-freetype-lib=/opt/sysroot-sles12-ppc64le/usr/lib64 --with-freetype-include=/opt/sysroot-sles12-ppc64le/usr/include --with-stdc++lib=static'
    jobs:
        - build-{major}-{build_type}-{platform}

- job-group:
    name: non-docker-builds
    docker_agent: ''
    platform:
        - macos_x86_64:
           configure_sysroot_default: ''
        - linux_ppc64:
           configure_sysroot_default: '--with-devkit=/opt/devkits/ppc64-linux-gnu-to-ppc64-linux-gnu --with-freetype-lib=/opt/devkits/ppc64-linux-gnu-to-ppc64-linux-gnu/ppc64-linux-gnu/sysroot/usr/lib64 --with-freetype-include=/opt/devkits/ppc64-linux-gnu-to-ppc64-linux-gnu/ppc64-linux-gnu/sysroot/usr/include'
        - windows_x86_64:
           configure_sysroot_default: ''
    jobs:
        - build-{major}-{build_type}-{platform}

- job-template:
    name: build-{major}-{build_type}-{platform}
    description: 'This project is generated. Do not modify manually.'
    project-type: pipeline
    concurrent: '{allow_concurrent_builds}'
    properties:
        - build-discarder:
            num-to-keep: 100
            artifact-num-to-keep: 1
    parameters:
      - string:
          name: SAPMACHINE_GIT_REPOSITORY
          default: 'https://github.com/SAP/SapMachine.git'
          description: 'The Git repository to use.'
      - string:
          name: SAPMACHINE_GIT_BRANCH
          default: '{branch_name}'
          description: 'The Git branch to build.'
      - string:
          name: GIT_TAG_NAME
          default: ''
          description: 'The Git tag to build.'
      - string:
          name: GITHUB_PR_NUMBER
          default: ''
          description: 'The GitHub Pull Request number. Only used in Pull Request validation builds.'
      - string:
          name: SAPMACHINE_ARCHIVE_NAME_PREFIX
          default: 'sapmachine{major}-{platform}'
          description: 'The prefix of the bundle archive.'
      - string:
           name: _CONFIGURE_SYSROOT
           default: '{configure_sysroot_default}'
           description: 'Sysroot configuration passed to configure script.'
      - string:
           name: EXTRA_CONFIGURE_OPTIONS
           default: ''
           description: 'Configure options passed directly to configure script.'
      - string:
          name: hotspot_test_groups
          default: ':tier1'
          description: 'Select the test group for jtreg hotspot tests. Empty means disabled.'
      - string:
          name: jdk_test_groups
          default: ':tier1'
          description: 'Select the test group for jtreg jdk tests. Empty means disabled.'
      - string:
          name: langtools_test_groups
          default: '"jdk tools lib"'
          description: 'Select the test group for jtreg langtools tests. Empty means disabled.'
      - bool:
          name: RUN_TESTS
          default: true
          description: 'enable/disable jtreg runs'
      - bool:
          name: RUN_DACAPO
          default: false
          description: 'enable/disable dacapo run'
      - bool:
          name: PUBLISH
          default: '{publish_default}'
          description: 'When set to true, the resulting bundles will be published to GitHub.'
      - bool:
          name: RELEASE
          default: '{release_default}'
          description: 'When set to true, marks this build as a release build, otherwise as pre-release.'

    dsl: |
        pipeline {{
            agent {{
                label "{platform}"
            }}
            stages {{
                stage("Checkout Infrastructure") {{
                    steps {{
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
                    }}
                }}
                stage("Build") {{
                    {docker_agent}
                    environment {{
                        CREATE_NO_BUILD_TAR_GZ = 'true'
                    }}
                    steps {{
                        sh 'SapMachine-Infrastructure/build-pipe/build.sh'
                    }}
                    post {{
                        success {{
                            junit 'gtest.xml'
                        }}
                    }}
                }}
                stage('Copy JTREG Artifacts') {{
                    {docker_agent}
                    when {{
                        expression {{ params.RUN_TESTS == true }}
                    }}
                    steps {{
                        script {{
                            step ([$class: 'CopyArtifact',
                            projectName: 'jtreg',
                            filter: "jtreg.zip",
                            target: 'jtreg']);
                        }}
                        sh 'cd jtreg && unzip jtreg.zip'
                    }}
                }}
                stage('Run Dacapo') {{
                    {docker_agent}
                    when {{
                        expression {{ params.RUN_DACAPO == true }}
                    }}
                    environment {{
                        DACAPO_CP='${{DACAPO_CLASSPATH}}'
                    }}
                    steps {{
                        sh "echo 'run dacapo'"
                        sh "python --version"
                        sh "python SapMachine-Infrastructure/lib/run_dacapo.py ${{env.DACAPO_CP}}"
                    }}
                }}
                stage('Run jtreg hotspot') {{
                    {docker_agent}
                    when {{
                        expression {{ params.RUN_TESTS == true }}
                    }}
                    environment {{
                      SCIMARK_2_CP = '/opt/scimark2/scimark2lib.jar'
                      TESTSUITE = 'hotspot'
                    }}
                    steps {{
                        sh "bash SapMachine-Infrastructure/test-pipe/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${{env.TESTSUITE}} ${{params.hotspot_test_groups}} || true"
                        publishHTML target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "test_report_${{env.TESTSUITE}}",
                            reportFiles: 'JTreport/index.html',
                            reportName: "JT Report ${{env.TESTSUITE}}"
                        ]
                        junit "test_report_${{env.TESTSUITE}}/JTwork/**/*.jtr.xml"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log"
                    }}
                }}
                stage('Run jtreg jdk') {{
                    {docker_agent}
                    when {{
                        expression {{ params.RUN_TESTS == true }}
                    }}
                    environment {{
                      TESTSUITE = 'jdk'
                    }}
                    steps {{
                        sh "bash SapMachine-Infrastructure/test-pipe/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${{env.TESTSUITE}} ${{params.jdk_test_groups}} || true"

                        publishHTML target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "test_report_${{env.TESTSUITE}}",
                            reportFiles: 'JTreport/index.html',
                            reportName: "JT Report ${{env.TESTSUITE}}"
                        ]
                        junit "test_report_${{env.TESTSUITE}}/JTwork/**/*.jtr.xml"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log"
                    }}
                }}
                stage('Run jtreg langtools') {{
                    {docker_agent}
                    when {{
                        expression {{ params.RUN_TESTS == true }}
                    }}
                    environment {{
                      TESTSUITE = 'langtools'
                    }}
                    steps {{
                        sh "bash SapMachine-Infrastructure/test-pipe/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${{env.TESTSUITE}} ${{params.langtools_test_groups}}  || true"

                        publishHTML target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "test_report_${{env.TESTSUITE}}",
                            reportFiles: 'JTreport/index.html',
                            reportName: "JT Report ${{env.TESTSUITE}}"
                        ]
                        junit "test_report_${{env.TESTSUITE}}/JTwork/**/*.jtr.xml"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log"
                    }}
                }}
                stage('Archive') {{
                    steps {{
                        archive 'test.zip'
                        archive 'apidocs.zip'
                        archive 'support_gensrc.zip'

                        script {{
                            def jdk_bundle_name = readFile "${{env.WORKSPACE}}/jdk_bundle_name.txt"
                            def jre_bundle_name = readFile "${{env.WORKSPACE}}/jre_bundle_name.txt"

                            step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                            step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                        }}
                    }}
                }}
                stage('Publish GitHub') {{
                    when {{
                        expression {{ params.PUBLISH == true }}
                    }}
                    environment {{
                      SAPMACHINE_GIT_REPO = 'github.com/SAP/SapMachine.git'
                      SAPMACHINE_PUBLISH_GITHUB_TOKEN = credentials('SapMachine-Github-Token')
                      SAPMACHINE_PUBLISH_GITHUB_REPO_NAME = 'SapMachine'
                      SAPMACHINE_PUBLISH_GITHUB_USER = 'SAP'
                    }}
                    steps {{
                        sh '''
                        SapMachine-Infrastructure/build-pipe/publish.sh
                        '''
                    }}
                }}
                stage('Publish Website Data') {{
                    when {{
                        expression {{ params.PUBLISH == true }}
                    }}
                    steps {{
                        build job: 'generate-website-data', propagate: false, wait: false
                    }}
                }}
                stage('Publish CF Java Buildpack Data') {{
                    when {{
                        expression {{ params.PUBLISH == true && params.RELEASE == true && JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/ }}
                    }}
                    steps {{
                        build job: 'generate-cf-data', propagate: false, wait: false, parameters:
                            [
                                string(name: 'MAJOR', value: '{major}')
                            ]
                    }}
                }}
                stage('Publish Debian Linux Packages') {{
                    when {{
                        expression {{ params.PUBLISH == true && params.RELEASE == true && JOB_NAME ==~ /((\S*)(linux_x86_64)(\S*))/ }}
                    }}
                    steps {{
                        build job: 'debian-pipeline', propagate: false, wait: true, parameters:
                            [
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                            ]
                    }}
                }}
            }}
            post {{
                unsuccessful {{
                   sh 'zip -rq workspace.zip .'
                   archiveArtifacts allowEmptyArchive: true, artifacts: 'workspace.zip'
                }}
                cleanup {{
                    cleanWs deleteDirs: true, disableDeferredWipeout: true
                }}
            }}
        }}

- job:
    name: branch-build-service
    description: 'This project is generated. Do not modify manually.'
    project-type: pipeline
    concurrent: true
    properties:
        - build-discarder:
            days-to-keep: 14
            artifact-days-to-keep: 7
    parameters:
        - string:
            name: SAPMACHINE_GIT_REPOSITORY
            default: 'https://github.com/SAP/SapMachine.git'
            description: 'The Git repository to use.'
        - string:
            name: SAPMACHINE_GIT_BRANCH
            default: 'sapmachine'
            description: 'The Git branch to build.'
        - string:
            name: GIT_TAG_NAME
            default: ''
            escription: 'The Git tag to build.'
        - string:
            name: EXTRA_CONFIGURE_OPTIONS
            default: ''
            description: 'Configure options passed directly to configure script.'
        - bool:
            name: BUILD_LINUX_X86_64
            default: true
        - bool:
            name: BUILD_LINUX_PPC64LE
            default: true
        - bool:
            name: BUILD_LINUX_PPC64
            default: true
        - bool:
            name: BUILD_WINDOWS_X86_64
            default: true
        - bool:
            name: BUILD_MACOS_X86_64
            default: true
        - bool:
            name: RUN_TESTS
            default: true
            description: 'enable/disable jtreg runs'
        - string:
            name: hotspot_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg hotspot tests. Empty means disabled.'
        - string:
            name: jdk_test_groups
            default: ':tier1'
            description: 'Select the test group for jtreg jdk tests. Empty means disabled.'
        - string:
            name: langtools_test_groups
            default: '"jdk tools lib"'
            description: 'Select the test group for jtreg langtools tests. Empty means disabled.'

    dsl: |
        pipeline {
            agent {
                label 'linux_x86_64'
            }
            stages {
                stage('Trigger Builds') {
                    parallel {
                        stage('Linux x86 64') {
                            when {
                                expression { params.BUILD_LINUX_X86_64 == true }
                            }
                            steps {
                                script {
                                    def job_linux_x86_64 = build job: 'build--branch-linux_x86_64', propagate: false, wait: true, parameters:
                                    [
                                        string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                        string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                        string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                        string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                        string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                        string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                        string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                        [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: false],
                                        [$class: 'BooleanParameterValue', name: 'RELEASE', value: false]
                                    ]

                                    env.LINUX_X86_64_JOB_ID = Integer.toString(job_linux_x86_64.getNumber())
                                    env.LINUX_X86_64_ARTIFACT_DIR = 'linux_x86_64_' + env.BUILD_NUMBER

                                    sh "mkdir -p ${WORKSPACE}/${LINUX_X86_64_ARTIFACT_DIR}"
                                }
                            }
                            post {
                                success {
                                    copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build--branch-linux_x86_64', target: env.LINUX_X86_64_ARTIFACT_DIR, selector:
                                    [
                                        $class: 'SpecificBuildSelector',
                                        buildNumber: env.LINUX_X86_64_JOB_ID
                                    ]

                                    script {
                                        def artifacts_selector = env.LINUX_X86_64_ARTIFACT_DIR + "/*.tar.gz"
                                        step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                                    }

                                    sh "rm -rf ${WORKSPACE}/${LINUX_X86_64_ARTIFACT_DIR}"
                                }
                            }
                        }
                        stage('Linux ppc64le') {
                            when {
                                expression { params.BUILD_LINUX_PPC64LE == true }
                            }
                            steps {
                                script {
                                    def job_linux_ppc64le = build job: 'build--branch-linux_ppc64le', propagate: false, wait: true, parameters:
                                    [
                                        string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                        string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                        string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                        string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                        string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                        string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                        string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                        [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: false],
                                        [$class: 'BooleanParameterValue', name: 'RELEASE', value: false]
                                    ]

                                    env.LINUX_PPC64LE_JOB_ID = Integer.toString(job_linux_ppc64le.getNumber())
                                    env.LINUX_PPC64LE_ARTIFACT_DIR = 'linux_ppc64le_' + env.BUILD_NUMBER

                                    sh "mkdir -p ${WORKSPACE}/${LINUX_PPC64LE_ARTIFACT_DIR}"
                                }
                            }
                            post {
                                success {
                                    copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build--branch-linux_ppc64le', target: env.LINUX_PPC64LE_ARTIFACT_DIR, selector:
                                    [
                                        $class: 'SpecificBuildSelector',
                                        buildNumber: env.LINUX_PPC64LE_JOB_ID
                                    ]

                                    script {
                                        def artifacts_selector = env.LINUX_PPC64LE_ARTIFACT_DIR + "/*.tar.gz"
                                        step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                                    }

                                    sh "rm -rf ${WORKSPACE}/${LINUX_PPC64LE_ARTIFACT_DIR}"
                                }
                            }
                        }
                        stage('Linux ppc64') {
                            when {
                                expression { params.BUILD_LINUX_PPC64 == true }
                            }
                            steps {
                                script {
                                    def job_linux_ppc64 = build job: 'build--branch-linux_ppc64', propagate: false, wait: true, parameters:
                                    [
                                        string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                        string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                        string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                        string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                        string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                        string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                        string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                        [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: false],
                                        [$class: 'BooleanParameterValue', name: 'RELEASE', value: false]
                                    ]

                                    env.LINUX_PPC64_JOB_ID = Integer.toString(job_linux_ppc64.getNumber())
                                    env.LINUX_PPC64_ARTIFACT_DIR = 'linux_ppc64_' + env.BUILD_NUMBER

                                    sh "mkdir -p ${WORKSPACE}/${LINUX_PPC64_ARTIFACT_DIR}"
                                }
                            }
                            post {
                                success {
                                    copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build--branch-linux_ppc64', target: env.LINUX_PPC64_ARTIFACT_DIR, selector:
                                    [
                                        $class: 'SpecificBuildSelector',
                                        buildNumber: env.LINUX_PPC64_JOB_ID
                                    ]

                                    script {
                                        def artifacts_selector = env.LINUX_PPC64_ARTIFACT_DIR + "/*.tar.gz"
                                        step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                                    }

                                    sh "rm -rf ${WORKSPACE}/${LINUX_PPC64_ARTIFACT_DIR}"
                                }
                            }
                        }
                        stage('Windows x86 64') {
                            when {
                                expression { params.BUILD_WINDOWS_X86_64 == true }
                            }
                            steps {
                                script {
                                    def job_windows_x86_64 = build job: 'build--branch-windows_x86_64', propagate: false, wait: true, parameters:
                                    [
                                        string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                        string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                        string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                        string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                        string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                        string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                        string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                        [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: false],
                                        [$class: 'BooleanParameterValue', name: 'RELEASE', value: false]
                                    ]

                                    env.WINDOWS_X86_64_JOB_ID = Integer.toString(job_windows_x86_64.getNumber())
                                    env.WINDOWS_X86_64_ARTIFACT_DIR = 'windows_x86_64_' + env.BUILD_NUMBER

                                    sh "mkdir -p ${WORKSPACE}/${WINDOWS_X86_64_ARTIFACT_DIR}"
                                }
                            }
                            post {
                                success {
                                    copyArtifacts filter: 'sapmachine-*.zip', projectName: 'build--branch-windows_x86_64', target: env.WINDOWS_X86_64_ARTIFACT_DIR, selector:
                                    [
                                        $class: 'SpecificBuildSelector',
                                        buildNumber: env.WINDOWS_X86_64_JOB_ID
                                    ]

                                    script {
                                        def artifacts_selector = env.WINDOWS_X86_64_ARTIFACT_DIR + "/*.zip"
                                        step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                                    }

                                    sh "rm -rf ${WORKSPACE}/${WINDOWS_X86_64_ARTIFACT_DIR}"
                                }
                            }
                        }
                        stage('macOS x86 64') {
                            when {
                                expression { params.BUILD_MACOS_X86_64 == true }
                            }
                            steps {
                                script {
                                    def job_macos_x86_64 = build job: 'build--branch-macos_x86_64', propagate: false, wait: true, parameters:
                                    [
                                        string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                        string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                        string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                        string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                        string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                        string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                        string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                        [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                        [$class: 'BooleanParameterValue', name: 'PUBLISH', value: false],
                                        [$class: 'BooleanParameterValue', name: 'RELEASE', value: false]
                                    ]

                                    env.MACOS_X86_64_JOB_ID = Integer.toString(job_macos_x86_64.getNumber())
                                    env.MACOS_X86_64_ARTIFACT_DIR = 'macos_x86_64_' + env.BUILD_NUMBER

                                    sh "mkdir -p ${WORKSPACE}/${MACOS_X86_64_ARTIFACT_DIR}"
                                }
                            }
                            post {
                                success {
                                    copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: 'build--branch-macos_x86_64', target: env.MACOS_X86_64_ARTIFACT_DIR, selector:
                                    [
                                        $class: 'SpecificBuildSelector',
                                        buildNumber: env.MACOS_X86_64_JOB_ID
                                    ]

                                    script {
                                        def artifacts_selector = env.MACOS_X86_64_ARTIFACT_DIR + "/*.tar.gz"
                                        step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                                    }

                                    sh "rm -rf ${WORKSPACE}/${MACOS_X86_64_ARTIFACT_DIR}"
                                }
                            }
                        }
                    }
                }
            }
        }



- job-template:
    name: validate-pr-{major}
    description: 'This project is generated. Do not modify manually.'
    project-type: pipeline
    parallel: true
    properties:
        - github:
            url: 'https://github.com/SAP/SapMachine'
        - build-discarder:
            num-to-keep: 100
            artifact-num-to-keep: 1
    triggers:
        - raw:
            xml: |
                <org.jenkinsci.plugins.github.pullrequest.GitHubPRTrigger plugin="github-pullrequest@0.2.4">
                    <spec>H/1 * * * *</spec>
                    <triggerMode>HEAVY_HOOKS</triggerMode>
                    <cancelQueued>false</cancelQueued>
                    <abortRunning>false</abortRunning>
                    <skipFirstRun>false</skipFirstRun>
                    <repoProviders>
                        <com.github.kostyasha.github.integration.generic.repoprovider.GitHubPluginRepoProvider>
                        <cacheConnection>true</cacheConnection>
                        <manageHooks>true</manageHooks>
                        <repoPermission>ADMIN</repoPermission>
                        </com.github.kostyasha.github.integration.generic.repoprovider.GitHubPluginRepoProvider>
                    </repoProviders>
                    <errorsAction>
                        <description>GitHub Pull Requests Trigger Errors</description>
                        <errors class="java.util.Collections$SynchronizedSet" serialization="custom">
                        <java.util.Collections_-SynchronizedCollection>
                            <default>
                            <c class="set"/>
                            <mutex class="java.util.Collections$SynchronizedSet" reference="../../.."/>
                            </default>
                        </java.util.Collections_-SynchronizedCollection>
                        </errors>
                    </errorsAction>
                    <events>
                        <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommitEvent/>
                        <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommentEvent>
                        <comment>retest this please</comment>
                        </org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPRCommentEvent>
                        <org.jenkinsci.plugins.github.pullrequest.events.impl.GitHubPROpenEvent/>
                    </events>
                    <preStatus>false</preStatus>
                    <branchRestriction>
                        <targetBranchList>
                        <string>{branch_name}</string>
                        </targetBranchList>
                    </branchRestriction>
                </org.jenkinsci.plugins.github.pullrequest.GitHubPRTrigger>

    dsl: |
        pipeline {{
            agent {{
                label 'linux_x86_64'
            }}
            stages {{
                stage("Checkout Infrastructure") {{
                    steps {{
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
                    }}
                }}
                stage('Verify PR') {{
                    environment {{
                    GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                    CONTEXT = "validate-pr-{major}-linux_x86_64"
                    }}
                    steps {{
                        script {{
                            env.VERIFICATION_RESULT = sh(
                                script: "python SapMachine-Infrastructure/lib/verify_pr.py -p ${{env.GITHUB_PR_NUMBER}}",
                                returnStatus: true
                            )

                            if (env.VERIFICATION_RESULT == "0") {{
                                setGitHubPullRequestStatus(context: CONTEXT, state: 'FAILURE')
                                error("Pull Request Validation failed")
                            }}

                            if (env.VERIFICATION_RESULT == "2") {{
                                setGitHubPullRequestStatus(context: CONTEXT, state: 'SUCCESS')
                            }}
                        }}
                    }}
                }}
                stage('Trigger Builds') {{
                    parallel {{
                        stage('Build linux_x86_64') {{
                            when {{
                                expression {{
                                    env.VERIFICATION_RESULT == "1"
                                }}
                            }}
                            environment {{
                                GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                                CONTEXT = "validate-pr-{major}-linux_x86_64"
                            }}
                            steps {{
                                setGitHubPullRequestStatus context: CONTEXT, state: 'PENDING'
                                build job: 'build-{major}-pr-validation-linux_x86_64', propagate: true, wait: true, parameters:
                                    [
                                        string(name: 'GITHUB_PR_NUMBER', value: env.GITHUB_PR_NUMBER),
                                        booleanParam(name: 'PUBLISH', value: false),
                                        booleanParam(name: 'RUN_TESTS', value: true),
                                    ]
                            }}
                            post {{
                                success {{
                                    setGitHubPullRequestStatus context: CONTEXT, state: 'SUCCESS'
                                }}
                                failure {{
                                    setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE'
                                }}
                            }}
                        }}
                        stage('Build linux_ppc64le') {{
                            when {{
                                expression {{
                                    env.VERIFICATION_RESULT == "1"
                                }}
                            }}
                            environment {{
                                GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                                CONTEXT = "validate-pr-{major}-linux_ppc64le"
                            }}
                            steps {{
                                setGitHubPullRequestStatus context: CONTEXT, state: 'PENDING'
                                build job: 'build-{major}-pr-validation-linux_ppc64le', propagate: true, wait: true, parameters:
                                    [
                                        string(name: 'GITHUB_PR_NUMBER', value: env.GITHUB_PR_NUMBER),
                                        booleanParam(name: 'PUBLISH', value: false),
                                        booleanParam(name: 'RUN_TESTS', value: true),
                                    ]
                            }}
                            post {{
                                success {{
                                    setGitHubPullRequestStatus context: CONTEXT, state: 'SUCCESS'
                                }}
                                failure {{
                                    setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE'
                                }}
                            }}
                        }}
                        stage('Build linux_ppc64') {{
                            when {{
                                expression {{
                                    env.VERIFICATION_RESULT == "1"
                                }}
                            }}
                            environment {{
                                GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                                CONTEXT = "validate-pr-{major}-linux_ppc64"
                            }}
                            steps {{
                                setGitHubPullRequestStatus context: CONTEXT, state: 'PENDING'
                                build job: 'build-{major}-pr-validation-linux_ppc64', propagate: true, wait: true, parameters:
                                    [
                                        string(name: 'GITHUB_PR_NUMBER', value: env.GITHUB_PR_NUMBER),
                                        booleanParam(name: 'PUBLISH', value: false),
                                        booleanParam(name: 'RUN_TESTS', value: true),
                                    ]
                            }}
                            post {{
                                success {{
                                    setGitHubPullRequestStatus context: CONTEXT, state: 'SUCCESS'
                                }}
                                failure {{
                                    setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE'
                                }}
                            }}
                        }}
                        stage('Build macos_x86_64') {{
                            when {{
                                expression {{
                                    env.VERIFICATION_RESULT == "1"
                                }}
                            }}
                            environment {{
                                GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                                CONTEXT = "validate-pr-{major}-macos_x86_64"
                            }}
                            steps {{
                                setGitHubPullRequestStatus context: CONTEXT, state: 'PENDING'
                                build job: 'build-{major}-pr-validation-macos_x86_64', propagate: true, wait: true, parameters:
                                    [
                                        string(name: 'GITHUB_PR_NUMBER', value: env.GITHUB_PR_NUMBER),
                                        booleanParam(name: 'PUBLISH', value: false),
                                        booleanParam(name: 'RUN_TESTS', value: true),
                                    ]
                            }}
                            post {{
                                success {{
                                    setGitHubPullRequestStatus context: CONTEXT, state: 'SUCCESS'
                                }}
                                failure {{
                                    setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE'
                                }}
                            }}
                        }}
                        stage('Build windows_x86_64') {{
                            when {{
                                expression {{
                                    env.VERIFICATION_RESULT == "1"
                                }}
                            }}
                            environment {{
                                GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                                CONTEXT = "validate-pr-{major}-windows_x86_64"
                            }}
                            steps {{
                                setGitHubPullRequestStatus context: CONTEXT, state: 'PENDING'
                                build job: 'build-{major}-pr-validation-windows_x86_64', propagate: true, wait: true, parameters:
                                    [
                                        string(name: 'GITHUB_PR_NUMBER', value: env.GITHUB_PR_NUMBER),
                                        booleanParam(name: 'PUBLISH', value: false),
                                        booleanParam(name: 'RUN_TESTS', value: true),
                                    ]
                            }}
                            post {{
                                success {{
                                    setGitHubPullRequestStatus context: CONTEXT, state: 'SUCCESS'
                                }}
                                failure {{
                                    setGitHubPullRequestStatus context: CONTEXT, state: 'FAILURE'
                                }}
                            }}
                        }}
                    }}
                }}
            }}
        }}
