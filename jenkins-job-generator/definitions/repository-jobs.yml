- job:
    name: repository-update
    description: 'This project is generated. Do not modify manually.'
    project-type: pipeline
    concurrent: false
    properties:
        - build-discarder:
            num-to-keep: 100
    triggers:
        - timed: "@midnight"
    dsl: |
        pipeline {
            agent {
                label "repository"
            }
            stages {
                stage("Checkout Infrastructure") {
                    steps {
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
                    }
                }
                stage('Build') {
                    environment {
                        GIT_USER = "SapMachine"
                        GIT_PASSWORD = credentials('SapMachine-Github-Token')
                    }
                    agent {
                        dockerfile {
                            dir "SapMachine-Infrastructure/dockerfiles/infrastructure"
                            reuseNode true
                            label "repository"
                        }
                    }
                    steps {
                        sh '''
                        openjdk_repositories=$(python3 SapMachine-Infrastructure/lib/list_openjdk_repositories.py)
                        for i in ${openjdk_repositories}
                        do
                            :
                            SapMachine-Infrastructure/lib/update_repo.sh $i
                        done

                        openjdk_repositories=$(python3 SapMachine-Infrastructure/lib/list_openjdk_repositories.py -m)
                        for i in ${openjdk_repositories}
                        do
                            :
                            SapMachine-Infrastructure/lib/update_repo.sh -m $i
                        done
                        '''
                    }
                }
            }
        }

- job:
    name: repository-tags
    description: 'This project is generated. Do not modify manually.'
    project-type: pipeline
    concurrent: false
    properties:
        - build-discarder:
            num-to-keep: 100
        - raw:
            xml: |
                <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
                    <triggers>
                        <jenkins.triggers.ReverseBuildTrigger>
                        <spec></spec>
                        <upstreamProjects>repository-update</upstreamProjects>
                        <threshold>
                            <name>SUCCESS</name>
                            <ordinal>0</ordinal>
                            <color>BLUE</color>
                            <completeBuild>true</completeBuild>
                        </threshold>
                        </jenkins.triggers.ReverseBuildTrigger>
                    </triggers>
                </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
    dsl: |
        pipeline {
            agent {
                label "repository"
            }
            stages {
              stage("Checkout Infrastructure") {
                    steps {
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
                    }
                }
                stage('Merge') {
                    agent {
                        dockerfile {
                            dir "SapMachine-Infrastructure/dockerfiles/infrastructure"
                            reuseNode true
                            label "repository"
                        }
                    }
                    environment {
                        JENKINS_CREDENTIALS = credentials('sapmachine-jenkins')
                        GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                        GIT_USER = "SapMachine"
                        GIT_PASSWORD = credentials('SapMachine-Github-Token')
                    }
                    steps {
                        sh '''
                        python3 SapMachine-Infrastructure/lib/merge_jdk_tags.py
                        python3 SapMachine-Infrastructure/lib/create_sapmachine_tags.py
                        '''
                    }
                }
            }
            post {
                cleanup {
                    cleanWs deleteDirs: true, disableDeferredWipeout: true
                }
            }
        }

- job:
    name: async-prof-repo-update
    description: 'This project is generated. Do not modify manually.'
    project-type: pipeline
    concurrent: false
    properties:
        - build-discarder:
            num-to-keep: 100
    triggers:
        - timed: "@midnight"
    dsl: |
        pipeline {
            agent {
                label "repository"
            }
            stages {
                stage("Checkout Infrastructure") {
                    steps {
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
                    }
                }
                stage("Checkout Repository") {
                    steps {
                        checkout changelog: true, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'async-profiler']], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/async-profiler.git']]]
                    }
                }
                stage('Merge') {
                    environment {
                        GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                    }
                    agent {
                        dockerfile {
                            dir "SapMachine-Infrastructure/dockerfiles/infrastructure"
                            reuseNode true
                            label "repository"
                        }
                    }
                    steps {
                        withCredentials([
                            [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                            ]) {
                            script {
                                env.ASYNC_PROF_BUILD_REQUIRED = sh(
                                        script: "SapMachine-Infrastructure/lib/merge_async_prof.sh",
                                        returnStatus: true
                                )
                            }
                        }
                    }
                }
                stage('Check Release') {
                    environment {
                        GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
                    }
                    agent {
                        dockerfile {
                            dir "SapMachine-Infrastructure/dockerfiles/infrastructure"
                            reuseNode true
                            label "repository"
                        }
                    }
                    steps {
                        withCredentials([
                            [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                            ]) {
                            script {
                                env.ASYNC_PROF_RELEASE_TAG = sh(
                                        script: "python3 SapMachine-Infrastructure/lib/async_chack_release.py",
                                        returnStdout: true
                                )
                            }
                        }
                    }
                }
                stage ('Trigger Snapshot Builds') {
                    when {
                        expression { env.ASYNC_PROF_BUILD_REQUIRED != "1" }
                    }
                    steps {
                        parallel (
                            linux_aarch64: {
                                build job: 'build-async-profiler-official-snapshot-linux_aarch64', parameters: [string(name: 'ASYNCPROF_GIT_BRANCH', value: 'master')]
                            },
                            linux_ppc64le: {
                                build job: 'build-async-profiler-official-snapshot-linux_ppc64le', parameters: [string(name: 'ASYNCPROF_GIT_BRANCH', value: 'master')]
                            },
                            linux_x86_64: {
                                build job: 'build-async-profiler-official-snapshot-linux_x86_64', parameters: [string(name: 'ASYNCPROF_GIT_BRANCH', value: 'master')]
                            },
                            macos_x86_64: {
                                build job: 'build-async-profiler-official-snapshot-macos_x86_64', parameters: [string(name: 'ASYNCPROF_GIT_BRANCH', value: 'master')]
                            },
                            failFast: false
                        )
                    }
                }
                stage ('Trigger Release Builds') {
                    when {
                                            expression { env.ASYNC_PROF_RELEASE_TAG != "No new releases" }
                    }
                    steps {
                        parallel (
                            linux_aarch64: {
                                build job: 'build-async-profiler-official-release-linux_aarch64', parameters: [string(name: 'ASYNCPROF_GIT_BRANCH', value: 'master'), string(name: 'GIT_TAG_NAME', value: env.ASYNC_PROF_RELEASE_TAG), bool(name: 'RELEASE', value: 'true']
                            },
                            linux_ppc64le: {
                                build job: 'build-async-profiler-official-release-linux_ppc64le', parameters: [string(name: 'ASYNCPROF_GIT_BRANCH', value: 'master'), string(name: 'GIT_TAG_NAME', value: env.ASYNC_PROF_RELEASE_TAG), bool(name: 'RELEASE', value: 'true']
                            },
                            linux_x86_64: {
                                build job: 'build-async-profiler-official-release-linux_x86_64', parameters: [string(name: 'ASYNCPROF_GIT_BRANCH', value: 'master'), string(name: 'GIT_TAG_NAME', value: env.ASYNC_PROF_RELEASE_TAG), bool(name: 'RELEASE', value: 'true']
                            },
                            macos_x86_64: {
                                build job: 'build-async-profiler-official-release-macos_x86_64', parameters: [string(name: 'ASYNCPROF_GIT_BRANCH', value: 'master'), string(name: 'GIT_TAG_NAME', value: env.ASYNC_PROF_RELEASE_TAG), bool(name: 'RELEASE', value: 'true']
                            },
                            failFast: false
                        )
                    }
                }
            }
        }
