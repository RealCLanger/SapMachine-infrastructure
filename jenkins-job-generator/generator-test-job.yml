- project:
    name: snapshot-builds
    major:
        - 11:
           branch_name: sapmachine11
           release_default: false
        - 12:
           branch_name: sapmachine12
           release_default: false
        - 13:
           branch_name: sapmachine
           release_default: false
    build_type: snapshot
    publish_default: false
    jobs:
        - docker-builds
        - non-docker-builds

- project:
    name: release-builds
    major:
        - 11:
           branch_name: sapmachine11
           release_default: true
        - 12:
           branch_name: sapmachine12
           release_default: false
        - 13:
           branch_name: sapmachine
           release_default: false
    build_type: release
    publish_default: true
    jobs:
        - docker-builds
        - non-docker-builds

- job-group:
    name: docker-builds
    docker_agent: |
            agent {{
                dockerfile {{
                    dir "{docker_dir}"
                    reuseNode true
                    label "{platform}"
                }}
            }}
    platform:
        - linux_x86_64:
           docker_dir: SapMachine-Infrastructure/dockerfiles/ubuntu_14_04_x86_64
        - linux_ppc64le:
           docker_dir: SapMachine-Infrastructure/dockerfiles/ubuntu_14_04_ppc64le
    jobs:
        - build-{major}-{build_type}-{platform}-generatortest

- job-group:
    name: non-docker-builds
    docker_agent: ''
    platform:
        - macos_x86_64
        - linux_ppc64
        - windows_x86_64
    jobs:
        - build-{major}-{build_type}-{platform}-generatortest

- job-template:
    name: build-{major}-{build_type}-{platform}-generatortest
    description: 'This project is generated. Do not modify manually.'
    parameters:
      - string:
          name: SAPMACHINE_GIT_BRANCH
          default: '{branch_name}'
      - string:
          name: hotspot_test_groups
          default: ':tier1'
          description: "Select the test group for jtreg hotspot tests"
      - string:
          name: jdk_test_groups
          default: ':tier1'
          description: "Select the test group for jtreg jdk tests"
      - string:
          name: langtools_test_groups
          default: ':tier1'
          description: "Select the test group for jtreg langtools tests"
      - bool:
          name: RUN_TESTS
          default: true
          description: "enable/disable jtreg runs"
      - bool:
          name: RUN_DACAPO
          default: false
          description: "enable/disable dacapo run"
      - bool:
          name: PUBLISH
          default: '{publish_default}'
      - bool:
          name: RELEASE
          default: '{release_default}'
    project-type: pipeline

    dsl: |
        pipeline {{
            agent {{
                label "{platform}"
            }}
            stages {{
                stage("Checkout Infrastructure") {{
                    steps {{
                        checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine-Infrastructure']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine-infrastructure.git']]]
                    }}
                }}
                stage("Build") {{
                    {docker_agent}
                    environment {{
                        CREATE_NO_BUILD_TAR_GZ = 'true'
                        NO_CHECKOUT = 'true'
                    }}
                    steps {{
                        checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/{branch_name}']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'SapMachine']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'SapMachine-github', url: 'https://github.com/SAP/SapMachine.git']]])
                        sh 'SapMachine-Infrastructure/build-pipe/build.sh'
                    }}
                    post {{
                        success {{
                            junit 'gtest.xml'
                        }}
                    }}
                }}
                stage('Copy JTREG Artifacts') {{
                    {docker_agent}
                    when {{
                        expression {{ params.RUN_TESTS == true }}
                    }}
                    steps {{
                        script {{
                            step ([$class: 'CopyArtifact',
                            projectName: 'jtreg',
                            filter: "jtreg.zip",
                            target: 'jtreg']);
                        }}
                        sh 'cd jtreg && unzip jtreg.zip'
                    }}
                }}
                stage('Run Dacapo') {{
                    {docker_agent}
                    when {{
                        expression {{ params.RUN_DACAPO == true }}
                    }}
                    environment {{
                        DACAPO_CP='${{DACAPO_CLASSPATH}}'
                    }}
                    steps {{
                        sh "echo 'run dacapo'"
                        sh "python --version"
                        sh "python SapMachine-Infrastructure/lib/run_dacapo.py ${{env.DACAPO_CP}}"
                    }}
                }}
                stage('Run jtreg hotspot') {{
                    {docker_agent}
                    when {{
                        expression {{ params.RUN_TESTS == true }}
                    }}
                    environment {{
                      SCIMARK_2_CP = '/opt/scimark2/scimark2lib.jar'
                      TESTSUITE = 'hotspot'
                    }}
                    steps {{
                        sh "bash SapMachine-Infrastructure/test-pipe/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${{env.TESTSUITE}} ${{params.hotspot_test_groups}} || true"
                        publishHTML target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "test_report_${{env.TESTSUITE}}",
                            reportFiles: 'JTreport/index.html',
                            reportName: "JT Report ${{env.TESTSUITE}}"
                        ]
                        junit "test_report_${{env.TESTSUITE}}/JTwork/**/*.jtr.xml"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log"
                    }}
                }}
                stage('Run jtreg jdk') {{
                    {docker_agent}
                    when {{
                        expression {{ params.RUN_TESTS == true }}
                    }}
                    environment {{
                      TESTSUITE = 'jdk'
                    }}
                    steps {{
                        sh "bash SapMachine-Infrastructure/test-pipe/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${{env.TESTSUITE}} ${{params.jdk_test_groups}} || true"

                        publishHTML target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "test_report_${{env.TESTSUITE}}",
                            reportFiles: 'JTreport/index.html',
                            reportName: "JT Report ${{env.TESTSUITE}}"
                        ]
                        junit "test_report_${{env.TESTSUITE}}/JTwork/**/*.jtr.xml"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log"
                    }}
                }}
                stage('Run jtreg langtools') {{
                    {docker_agent}
                    when {{
                        expression {{ params.RUN_TESTS == true }}
                    }}
                    environment {{
                      TESTSUITE = 'langtools'
                    }}
                    steps {{
                        sh "bash SapMachine-Infrastructure/test-pipe/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${{env.TESTSUITE}} ${{params.langtools_test_groups}}  || true"

                        publishHTML target: [
                            allowMissing: false,
                            alwaysLinkToLastBuild: false,
                            keepAll: true,
                            reportDir: "test_report_${{env.TESTSUITE}}",
                            reportFiles: 'JTreport/index.html',
                            reportName: "JT Report ${{env.TESTSUITE}}"
                        ]
                        junit "test_report_${{env.TESTSUITE}}/JTwork/**/*.jtr.xml"
                        archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${{env.TESTSUITE}}/JTwork/**/hs_err_pid*.log"
                    }}
                }}
                stage('Archive') {{
                    steps {{
                        archive 'test.zip'
                        archive 'apidocs.zip'
                        archive 'support_gensrc.zip'

                        script {{
                            def jdk_bundle_name = readFile "${{env.WORKSPACE}}/jdk_bundle_name.txt"
                            def jre_bundle_name = readFile "${{env.WORKSPACE}}/jre_bundle_name.txt"

                            step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                            step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                        }}
                    }}
                }}
                stage('Publish GitHub') {{
                    when {{
                        expression {{ params.PUBLISH == true }}
                    }}
                    environment {{
                      SAPMACHINE_GIT_REPO = 'github.com/SAP/SapMachine.git'
                      SAPMACHINE_PUBLISH_GITHUB_TOKEN = credentials('SapMachine-Github-Token')
                      SAPMACHINE_PUBLISH_GITHUB_REPO_NAME = 'SapMachine'
                      SAPMACHINE_PUBLISH_GITHUB_USER = 'SAP'
                    }}
                    steps {{
                        sh '''
                        SapMachine-Infrastructure/build-pipe/publish.sh
                        '''
                    }}
                }}
                stage('Publish Website Data') {{
                    when {{
                        expression {{ params.PUBLISH == true }}
                    }}
                    steps {{
                        build job: 'generate-website-data', propagate: false, wait: false
                    }}
                }}
                stage('Publish CF Java Buildpack Data') {{
                    when {{
                        expression {{ params.PUBLISH == true && params.AGENT_LABEL == "linux_x86_64" }}
                    }}
                    steps {{
                        script {{
                            def match = params.GIT_TAG_NAME =~ /[^-]*-([0-9]+)[\.0-9]*.*/
                            env.MAJOR_VERSION = match[0][1]
                        }}
                        build job: 'generate-cf-data', propagate: false, wait: false, parameters:
                            [
                                string(name: 'MAJOR', value: env.MAJOR_VERSION)
                            ]
                    }}
                }}
            }}
            post {{
                always {{
                    cleanWs deleteDirs: true, disableDeferredWipeout: true
                }}
            }}
        }}

- view:
    name: 'Snapshot Builds'
    description: 'Snapshot Builds'
    view-type: list
    regex: 'build-[\d]+-snapshot-.*'

- view:
    name: 'Release Builds'
    description: 'Release Builds'
    view-type: list
    regex: 'build-[\d]+-release-.*'

- view:
    name: 'Linux x86 64 Builds'
    description: 'Linux x86 64 Builds'
    view-type: list
    regex: 'build-[\d]+-.*-linux_x86_64.*'

- view:
    name: 'Linux ppc64 Builds'
    description: 'Linux ppc64 Builds'
    view-type: list
    regex: 'build-[\d]+-.*-linux_ppc64-.*'

- view:
    name: 'Linux ppc64le Builds'
    description: 'Linux ppc64le Builds'
    view-type: list
    regex: 'build-[\d]+-.*-linux_ppc64le.*'

- view:
    name: 'macOS x86 64 Builds'
    description: 'macOS x86 64 Builds'
    view-type: list
    regex: 'build-[\d]+-.*-macos_x86_64.*'

- view:
    name: 'Windows x86 64 Builds'
    description: 'Windows x86 64 Builds'
    view-type: list
    regex: 'build-[\d]+-.*-windows_x86_64.*'