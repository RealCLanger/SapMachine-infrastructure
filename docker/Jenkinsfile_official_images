pipeline {
    agent {
        label params.AGENT_LABEL
    }
    stages {
        stage('Generate Dockerfile') {
            steps {
                withCredentials([
                  [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                  ]) {
                    script {
                        def major_version = (params.GIT_TAG_NAME =~ /[^-]*-([0-9]+)[\.0-9]*\+.*/)[0][1]
                        def workdir = 'sapmachine_infrastructure/dockerfiles/official/' + major_version

                        sh(
                            script: "git clone https://${env.GIT_USER}:${env.GIT_PASSWORD}@github.com/SAP/SapMachine-infrastructure.git -b master sapmachine_infrastructure",
                            returnStdout: false
                        )

                        sh(
                            script: "python lib/make_docker_image.py -t ${GIT_TAG_NAME} -i jdk --workdir ${workdir}",
                            returnStdout: false
                        )

                        sh(
                            script: "cd sapmachine_infrastructure &&  git add dockerfiles",
                            returnStdout: false
                        )

                        sh(
                            script: "cd sapmachine_infrastructure && git commit -m 'Updated official Docker files.'",
                            returnStdout: false
                        )

                        sh(
                            script: "cd sapmachine_infrastructure && git push",
                            returnStdout: false
                        )
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs deleteDirs: true, disableDeferredWipeout: true
        }
    }
}
