pipeline {
    agent {
        label params.AGENT_LABEL
    }
    stages {
        stage('Generate Dockerfiles') {
            environment {
              GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
            }
            steps {
              withCredentials([
                  [$class: 'UsernamePasswordMultiBinding', credentialsId: 'docker-sapmachine', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD'],
                  ]
                  ) {
                    sh "python lib/make_docker_image.py -t ${GIT_TAG_NAME} -i test ${build_alpine_arg}"
                    sh 'cp docker_work/test/Dockerfile Dockerfile'
                    archiveArtifacts 'Dockerfile'
                }
            }
        }
        stage('Build') {
            agent {
                dockerfile {
                    label params.AGENT_LABEL
                    dir params.BUILD_DOCKER_DIR
                    reuseNode true
                }
            }
            when {
                expression { params.RUN_TESTS == true }
            }
            environment {
              SAPMACHINE_GIT_REPO = 'github.com/SAP/SapMachine.git'
            }
            steps {
              withCredentials([
                  [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                  ]) {
                    sh 'build-pipe/build.sh'
                    archiveArtifacts 'build.tar.gz'

                }
            }
        }
        stage('Run Tests') {
            agent {
                dockerfile {
                    label params.AGENT_LABEL
                    dir params.BUILD_DOCKER_DIR
                    reuseNode true
                }
            }
            when {
                expression { params.RUN_TESTS == true }
            }
            steps {
                build job: HOTSPOT_TEST_JOB, propagate: false, wait: true, parameters:
                [
                    string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME)
                ]

                build job: JDK_TEST_JOB, propagate: false, wait: true, parameters:
                [
                    string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME)
                ]

                build job: LANGTOOLS_TEST_JOB, propagate: false, wait: true, parameters:
                [
                    string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME)
                ]
            }
        }
        stage('Publish Images') {
            when {
                expression { params.PUBLISH == true }
            }
            environment {
              GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
            }
            steps {
              withCredentials([
                  [$class: 'UsernamePasswordMultiBinding', credentialsId: 'docker-sapmachine', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD'],
                  ]
                  ) {
                    script {
                        def publish_latest_arg = ''
                        def build_alpine_arg = ''

                        if (PUBLISH_LATEST == 'true') {
                            publish_latest_arg = '--latest'
                        }

                        sh(
                            script: "python lib/make_docker_image.py -t ${GIT_TAG_NAME} -i jdk -p ${publish_latest_arg}",
                            returnStdout: false
                        )
                    }
                }
            }
        }
    }
}
