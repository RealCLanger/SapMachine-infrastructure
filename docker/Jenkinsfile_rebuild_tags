pipeline {
    agent any

    stages {
        stage('Test') {
            environment {
              GITHUB_API_ACCESS_TOKEN = credentials('SapMachine-Github-Token')
            }
            steps {
                withCredentials([
                  [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                  ]) {
                    script {
                        def tag_list = sh(
                        script: 'python lib/list_tags.py -m ${MAJOR}',
                        returnStdout: true
                        ).trim().tokenize(' ').reverse()

                        def job_name = 'build-' + MAJOR + '-docker'
                        def i = 0
                        def publish_latest = false

                        tag_list.each { tag ->
                            def workdir = 'sapmachine_infrastructure/dockerfiles/official/' + MAJOR

                            publish_latest = (i == (tag_list.size() - 1))
                            i += 1

                            def message = 'building tag ' + tag

                            if (publish_latest) {
                                message += ' (as latest)'

                                sh(
                                    script: "rm -rf sapmachine_infrastructure && git clone https://${env.GIT_USER}:${env.GIT_PASSWORD}@github.com/SAP/SapMachine-infrastructure.git -b master sapmachine_infrastructure",
                                    returnStdout: false
                                )

                                sh(
                                    script: "python lib/make_docker_image.py -t ${tag} -i jdk --workdir ${workdir}",
                                    returnStdout: false
                                )

                                sh(
                                    script: "cd sapmachine_infrastructure && git add dockerfiles || true",
                                    returnStdout: false
                                )

                                sh(
                                    script: "cd sapmachine_infrastructure && git commit -m 'Updated official Docker files.' || true",
                                    returnStdout: false
                                )

                                sh(
                                    script: "cd sapmachine_infrastructure && git push || true",
                                    returnStdout: false
                                )
                            }

                            println message

                            build(
                                job: job_name,
                                propagate: false,
                                wait: true,
                                parameters: [
                                    string(name: 'GIT_TAG_NAME', value: tag),
                                    [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: false],
                                    [$class: 'BooleanParameterValue', name: 'PUBLISH', value: true],
                                    [$class: 'BooleanParameterValue', name: 'PUBLISH_LATEST', value: publish_latest]
                                ]
                            )
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs deleteDirs: true, disableDeferredWipeout: true
        }
    }
}
