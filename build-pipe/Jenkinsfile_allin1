pipeline {
    agent {
        dockerfile {
            label params.AGENT_LABEL
            dir params.DOCKER_DIR
            reuseNode true
        }
    }
    stages {
        stage('Build') {
            environment {
              SAPMACHINE_PUBLISH_GITHUB_TOKEN = credentials('SapMachine-Github-Token')
              SAPMACHINE_GIT_USER = 'SapMachine'
              SAPMACHINE_GIT_EMAIL = 'sapmachine@sap.com'
            }
            steps {
              withCredentials([
                  [$class: 'UsernamePasswordMultiBinding', credentialsId: 'SapMachine-github', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASSWORD']
                  ]) {
                sh '''
                  build-pipe/build.sh
                  '''
                }
            }
            post {
                success {
                    junit 'gtest.xml'
                }
            }
        }
        stage('Copy JTREG Artifacts') {
            steps {
                script {
                    step ([$class: 'CopyArtifact',
                    projectName: 'jtreg',
                    filter: "jtreg.zip",
                    target: 'jtreg']);
                }
                sh 'cd jtreg && unzip jtreg.zip'
            }
        }
        stage('Run jtreg hotspot') {
            environment {
              SCIMARK_2_CP = '/opt/scimark2/scimark2lib.jar'
              TESTSUITE = 'hotspot'
            }
            steps {
                sh "bash test-pipe/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg jdk') {
            environment {
              TESTSUITE = 'jdk'
            }
            steps {
                sh "bash test-pipe/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups} || true"
            
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Run jtreg langtools') {
            environment {
              TESTSUITE = 'langtools'
            }
            steps {
                sh "bash test-pipe/run_jtreg.sh -l `pwd`/SapMachine -h `pwd`/jtreg/jtreg -s ${env.TESTSUITE} ${params.jdk_test_groups}  || true"
            
                publishHTML target: [
                    allowMissing: false,
                    alwaysLinkToLastBuild: false,
                    keepAll: true,
                    reportDir: "test_report_${env.TESTSUITE}",
                    reportFiles: 'JTreport/index.html',
                    reportName: "JT Report ${env.TESTSUITE}"
                ]
                junit "test_report_${env.TESTSUITE}/JTwork/**/*.jtr.xml"
                archiveArtifacts allowEmptyArchive: true, artifacts: "test_report_${env.TESTSUITE}/JTwork/**/hs_err_pid*.log"
            }
        }
        stage('Archive') {
            steps {
                archive 'test.zip'
                archive 'apidocs.zip'

                script {
                    def jdk_bundle_name = readFile "${env.WORKSPACE}/jdk_bundle_name.txt"
                    def jre_bundle_name = readFile "${env.WORKSPACE}/jre_bundle_name.txt"

                    step ([$class: 'ArtifactArchiver', artifacts: jdk_bundle_name]);
                    step ([$class: 'ArtifactArchiver', artifacts: jre_bundle_name]);
                }
            }
        }
        stage('Publish GitHub') {
            when {
                expression { params.PUBLISH == true }
            }
            environment {
              SAPMACHINE_GIT_REPO = 'github.com/SAP/SapMachine.git'
              SAPMACHINE_PUBLISH_GITHUB_TOKEN = credentials('SapMachine-Github-Token')
              SAPMACHINE_PUBLISH_GITHUB_REPO_NAME = 'SapMachine'
              SAPMACHINE_PUBLISH_GITHUB_USER = 'SAP'
            }
            steps {
                sh '''
                build-pipe/publish.sh
                '''
            }
        }
        stage('Publish Website Data') {
            when {
                expression { params.PUBLISH == true }
            }
            steps {
                build job: 'generate-website-data', propagate: false, wait: false
            }
        }
        stage('Publish CF Java Buildpack Data') {
            when {
                expression { params.PUBLISH == true && params.AGENT_LABEL == "linux_x86_64" }
            }
            steps {
                script {
                    def match = params.GIT_TAG_NAME =~ /[^-]*-([0-9]+)[\.0-9]*\+.*/
                    env.MAJOR_VERSION = match[0][1]
                }
                build job: 'generate-cf-data', propagate: false, wait: false, parameters:
                    [
                        string(name: 'MAJOR', value: env.MAJOR_VERSION)
                    ]
            }
        }
        stage('Publish Debian Linux Packages') {
            when {
                expression { JOB_NAME ==~ /((\S*)(release)$)/  && params.PUBLISH == true }
            }
            steps {
            build job: 'debian-pipeline', propagate: false, wait: true, parameters:
                [
                    string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                    [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                ]
            }
        }
        stage('Publish Alpine Linux Packages') {
            when {
                expression { JOB_NAME ==~ /((\S*)(release-alpine)$)/  && params.PUBLISH == true && params.AGENT_LABEL == "linux_x86_64"}
            }
            steps {
            build job: 'apk-pipeline', propagate: false, wait: true, parameters:
                [
                    string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                    [$class: 'BooleanParameterValue', name: 'DEPLOY', value: true]
                ]
            }
        }
        stage('Publish Docker Images') {
            when {
                expression { JOB_NAME ==~ /((\S*)(release)(\S*))/ && params.PUBLISH == true && params.AGENT_LABEL == "linux_x86_64" }
            }
            steps {
            build job: DOCKER_BUILD_JOB, propagate: false, wait: true, parameters:
                [
                    string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                    [$class: 'BooleanParameterValue', name: 'PUBLISH', value: true],
                    [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: true]
                ]
            }
        }
    }
    post {
        always {
            cleanWs deleteDirs: true, disableDeferredWipeout: true
        }
    }
}
