pipeline {
    agent {
        label params.AGENT_LABEL
    }
    stages {
        stage('Trigger Builds') {
            parallel {
                stage('Linux x86 64') {
                    when {
                        expression { params.BUILD_LINUX_X86_64 == true}
                    }
                    steps {
                        script {
                            def job_linux_x86_64 = build job: LINUX_X86_64_JOB, propagate: false, wait: true, parameters:
                            [
                                string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                [$class: 'BooleanParameterValue', name: 'PUBLISH', value: false],
                                [$class: 'BooleanParameterValue', name: 'PROPAGATE_RESULT', value: false],
                                [$class: 'BooleanParameterValue', name: 'RELEASE', value: false]
                            ]

                            env.LINUX_X86_64_JOB_ID = Integer.toString(job_linux_x86_64.getNumber())
                            env.LINUX_X86_64_ARTIFACT_DIR = 'linux_x86_64_' + env.BUILD_NUMBER

                            sh "mkdir -p ${WORKSPACE}/${LINUX_X86_64_ARTIFACT_DIR}"
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: LINUX_X86_64_JOB, target: env.LINUX_X86_64_ARTIFACT_DIR, selector:
                            [
                                $class: 'SpecificBuildSelector',
                                buildNumber: env.LINUX_X86_64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.LINUX_X86_64_ARTIFACT_DIR + "/*.tar.gz"
                                step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                            }

                            sh "rm -rf ${WORKSPACE}/${LINUX_X86_64_ARTIFACT_DIR}"
                        }
                    }
                }
                stage('Linux ppc64le') {
                    when {
                        expression { params.BUILD_LINUX_PPC64LE == true}
                    }
                    steps {
                        script {
                            def job_linux_ppc64le = build job: LINUX_PPC64LE_JOB, propagate: false, wait: true, parameters:
                            [
                                string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                [$class: 'BooleanParameterValue', name: 'PUBLISH', value: false],
                                [$class: 'BooleanParameterValue', name: 'PROPAGATE_RESULT', value: false],
                                [$class: 'BooleanParameterValue', name: 'RELEASE', value: false]
                            ]

                            env.LINUX_PPC64LE_JOB_ID = Integer.toString(job_linux_ppc64le.getNumber())
                            env.LINUX_PPC64LE_ARTIFACT_DIR = 'linux_ppc64le_' + env.BUILD_NUMBER

                            sh "mkdir -p ${WORKSPACE}/${LINUX_PPC64LE_ARTIFACT_DIR}"
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: LINUX_PPC64LE_JOB, target: env.LINUX_PPC64LE_ARTIFACT_DIR, selector:
                            [
                                $class: 'SpecificBuildSelector',
                                buildNumber: env.LINUX_PPC64LE_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.LINUX_PPC64LE_ARTIFACT_DIR + "/*.tar.gz"
                                step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                            }

                            sh "rm -rf ${WORKSPACE}/${LINUX_PPC64LE_ARTIFACT_DIR}"
                        }
                    }
                }
                stage('Linux ppc64') {
                    when {
                        expression { params.BUILD_LINUX_PPC64 == true}
                    }
                    steps {
                        script {
                            def job_linux_ppc64 = build job: LINUX_PPC64_JOB, propagate: false, wait: true, parameters:
                            [
                                string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                [$class: 'BooleanParameterValue', name: 'PUBLISH', value: false],
                                [$class: 'BooleanParameterValue', name: 'PROPAGATE_RESULT', value: false],
                                [$class: 'BooleanParameterValue', name: 'RELEASE', value: false]
                            ]

                            env.LINUX_PPC64_JOB_ID = Integer.toString(job_linux_ppc64.getNumber())
                            env.LINUX_PPC64_ARTIFACT_DIR = 'linux_ppc64_' + env.BUILD_NUMBER

                            sh "mkdir -p ${WORKSPACE}/${LINUX_PPC64_ARTIFACT_DIR}"
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: LINUX_PPC64_JOB, target: env.LINUX_PPC64_ARTIFACT_DIR, selector:
                            [
                                $class: 'SpecificBuildSelector',
                                buildNumber: env.LINUX_PPC64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.LINUX_PPC64_ARTIFACT_DIR + "/*.tar.gz"
                                step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                            }

                            sh "rm -rf ${WORKSPACE}/${LINUX_PPC64_ARTIFACT_DIR}"
                        }
                    }
                }
                stage('Windows x86 64') {
                    when {
                        expression { params.BUILD_WINDOWS_X86_64 == true}
                    }
                    steps {
                        script {
                            def job_windows_x86_64 = build job: WINDOWS_X86_64_JOB, propagate: false, wait: true, parameters:
                            [
                                string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                [$class: 'BooleanParameterValue', name: 'PUBLISH', value: false],
                                [$class: 'BooleanParameterValue', name: 'PROPAGATE_RESULT', value: false],
                                [$class: 'BooleanParameterValue', name: 'RELEASE', value: false]
                            ]

                            env.WINDOWS_X86_64_JOB_ID = Integer.toString(job_windows_x86_64.getNumber())
                            env.WINDOWS_X86_64_ARTIFACT_DIR = 'windows_x86_64_' + env.BUILD_NUMBER

                            sh "mkdir -p ${WORKSPACE}/${WINDOWS_X86_64_ARTIFACT_DIR}"
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: 'sapmachine-*.zip', projectName: WINDOWS_X86_64_JOB, target: env.WINDOWS_X86_64_ARTIFACT_DIR, selector:
                            [
                                $class: 'SpecificBuildSelector',
                                buildNumber: env.WINDOWS_X86_64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.WINDOWS_X86_64_ARTIFACT_DIR + "/*.zip"
                                step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                            }

                            sh "rm -rf ${WORKSPACE}/${WINDOWS_X86_64_ARTIFACT_DIR}"
                        }
                    }
                }
                stage('macOS x86 64') {
                    when {
                        expression { params.BUILD_MACOS_X86_64 == true}
                    }
                    steps {
                        script {
                            def job_macos_x86_64 = build job: MACOS_X86_64_JOB, propagate: false, wait: true, parameters:
                            [
                                string(name: 'SAPMACHINE_GIT_REPOSITORY', value: params.SAPMACHINE_GIT_REPOSITORY),
                                string(name: 'SAPMACHINE_GIT_BRANCH', value: params.SAPMACHINE_GIT_BRANCH),
                                string(name: 'GIT_TAG_NAME', value: params.GIT_TAG_NAME),
                                string(name: 'EXTRA_CONFIGURE_OPTIONS', value: params.EXTRA_CONFIGURE_OPTIONS),
                                string(name: 'hotspot_test_groups', value: params.hotspot_test_groups),
                                string(name: 'jdk_test_groups', value: params.jdk_test_groups),
                                string(name: 'langtools_test_groups', value: params.langtools_test_groups),
                                [$class: 'BooleanParameterValue', name: 'RUN_TESTS', value: params.RUN_TESTS],
                                [$class: 'BooleanParameterValue', name: 'PUBLISH', value: false],
                                [$class: 'BooleanParameterValue', name: 'PROPAGATE_RESULT', value: false],
                                [$class: 'BooleanParameterValue', name: 'RELEASE', value: false]
                            ]

                            env.MACOS_X86_64_JOB_ID = Integer.toString(job_macos_x86_64.getNumber())
                            env.MACOS_X86_64_ARTIFACT_DIR = 'macos_x86_64_' + env.BUILD_NUMBER

                            sh "mkdir -p ${WORKSPACE}/${MACOS_X86_64_ARTIFACT_DIR}"
                        }
                    }
                    post {
                        success {
                            copyArtifacts filter: 'sapmachine-*.tar.gz', projectName: MACOS_X86_64_JOB, target: env.MACOS_X86_64_ARTIFACT_DIR, selector:
                            [
                                $class: 'SpecificBuildSelector',
                                buildNumber: env.MACOS_X86_64_JOB_ID
                            ]

                            script {
                                def artifacts_selector = env.MACOS_X86_64_ARTIFACT_DIR + "/*.tar.gz"
                                step ([$class: 'ArtifactArchiver', artifacts: artifacts_selector]);
                            }

                            sh "rm -rf ${WORKSPACE}/${MACOS_X86_64_ARTIFACT_DIR}"
                        }
                    }
                }
            }
        }
    }
}
