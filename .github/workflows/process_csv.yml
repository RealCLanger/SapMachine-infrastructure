name: Parse and Modify CSV Files

on:
  workflow_dispatch:  # Allows manual triggering of the workflow
  schedule:
    - cron: '0 0 * * *'  # Optional: Runs daily at midnight

jobs:
  process_csv:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v3
      with:
        ref: release_stats  # Check out the release_stats branch

    - name: Install dependencies
      run: sudo apt-get install jq

    - name: Configure Git
      run: |
        git config --local user.email "sapmachine@sap.com"
        git config --local user.name "SapMachine Github Actions Bot"

    - name: Run CSV processing
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create a new branch for changes
        BRANCH_NAME="update-csv-${{ github.run_id }}"
        git checkout -b $BRANCH_NAME

        # Fetch CSV files from the stats folder
        files=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/SAP/SapMachine-Infrastructure/contents/stats?ref=release_stats" | \
          jq -r '.[] | select(.name | endswith(".csv")) | .path')

        changes_made=false  # Flag to track if changes were made

        for file in $files; do
          echo "Processing $file"
          
          # Fetch and decode CSV content
          csv_content=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/SAP/SapMachine-Infrastructure/contents/$file?ref=release_stats" | \
            jq -r '.content' | base64 --decode)

          # Output original content for debugging
          echo "Original Content:"
          echo "$csv_content"

          # Modify the CSV content
          modified_content=$(echo "$csv_content" | awk -F, '
            BEGIN {OFS=","}
            {
              if ($5 ~ /\.rpm$/) {
                if ($6 == "") {
                  $6 = "linux";  # Update os_name (6th column) to "linux"
                  changed = 1;  # Mark as changed
                }
              }
              print
            }')

          # Output modified content for debugging
          echo "Modified Content:"
          echo "$modified_content"

          # Check if changes were made
          if [[ "$csv_content" != "$modified_content" ]]; then
            changes_made=true  # Set flag if changes are detected
            echo "Changes made to $file"
            # Write the modified content back to the original file in the stats directory
            echo "$modified_content" | base64 | tr -d '\n' | curl -X PUT -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"message\": \"Update CSV file: $file\", \"content\": \"$(cat -)\", \"sha\": \"$(curl -s -H \"Authorization: token $GITHUB_TOKEN\" \"https://api.github.com/repos/SAP/SapMachine-Infrastructure/contents/$file?ref=release_stats\" | jq -r '.sha')\"}" \
              "https://api.github.com/repos/SAP/SapMachine-Infrastructure/contents/$file"
          else
            echo "No changes made to $file"
          fi
        done

        # Commit the changes if any were made
        if [ "$changes_made" = true ]; then
          # Create a pull request
          gh pr create --base release_stats --head $BRANCH_NAME --title "Update CSV Files" --body "This PR updates the os_name to Linux for RPM files."
        else
          echo "No changes made; skipping PR creation."
        fi

    - name: Push changes to remote
      run: |
        if [ "$changes_made" = true ]; then
          git push origin $BRANCH_NAME
        fi
